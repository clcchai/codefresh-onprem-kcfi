// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md

package stage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCodefreshAssetsAssetsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40" +
	"\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50" +
	"\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1" +
	"\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func bindataCodefreshAssetsAssetsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshAssetsAssetsmd,
		"codefresh/assets/assets.md",
	)
}



func bindataCodefreshAssetsAssetsmd() (*asset, error) {
	bytes, err := bindataCodefreshAssetsAssetsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/assets/assets.md",
		size: 88,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588116394, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshCertsTlsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69" +
	"\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb" +
	"\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79" +
	"\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8" +
	"\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f" +
	"\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1" +
	"\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3" +
	"\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5" +
	"\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e" +
	"\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6" +
	"\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00" +
	"\x00")

func bindataCodefreshCertsTlsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshCertsTlsmd,
		"codefresh/certs/tls.md",
	)
}



func bindataCodefreshCertsTlsmd() (*asset, error) {
	bytes, err := bindataCodefreshCertsTlsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/certs/tls.md",
		size: 490,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588103933, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshConfigyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\x1b\xb9\x11\x7f\xdf\x4f\x31\x88\x1e\x9a\x14\xde\x95\x94" +
	"\xe4\x2e\xc9\xe2\x7a\xad\x4f\xf1\xdd\x05\xc1\xc5\x86\x65\xa7\x17\x14\x85\x41\x71\x67\x25\x56\x5c\x72\x4d\x72\x65" +
	"\x2b\xbd\x7e\xf7\x62\x86\xfb\x4f\x4e\x80\x26\x76\xd1\x97\x1e\x6c\xd8\xcb\x21\x67\xe6\xc7\x99\x21\xf9\x23\x2b\x0c" +
	"\xa2\x10\x41\xe4\x09\xc0\x56\x99\x22\x07\x69\x0b\x2c\x1d\xfa\x4d\x02\xa0\x8c\x0f\x42\x6b\x74\xd4\x0d\xe0\x50\xa3" +
	"\xf0\x98\xc3\x3c\x9b\x65\xaf\x5e\xb2\x6c\x02\x61\x5f\x63\x0e\x6d\x03\xe0\x91\xad\xd1\x89\x60\xdd\x23\x48\x41\xd4" +
	"\xb5\xde\x0f\x26\x41\xba\x02\x0a\x2c\x95\x51\x41\x59\x33\xe8\x6c\x50\x57\x34\xbe\x75\x38\x6d\xea\xb5\x13\x05\x02" +
	"\xc9\x41\x6e\x84\x0b\x50\x3a\x5b\x81\xd4\x0a\x4d\x60\xbd\xe8\xb6\x73\xc6\xa2\xae\x11\xd1\x02\x4c\x26\x13\x10\x92" +
	"\x3c\x81\xf2\x11\xcb\x6f\x0e\x6b\x2d\x24\xfe\x66\xac\x41\x78\xbc\xda\xc3\xb6\x59\xa1\x0c\xfa\xb0\x1b\xd2\x12\xbe" +
	"\xeb\x61\xa7\x0e\xbd\x6d\x9c\xc4\x6c\x2f\x2a\xfd\xfd\x93\xd6\x7c\x34\x9d\x47\xcd\xce\xa5\xaa\xc4\x1a\x47\x51\x9c" +
	"\xca\x32\xb5\xa6\x76\x58\xa5\x3d\x3c\x2d\x02\xfa\xd0\x69\x78\x74\x3b\x25\xf1\x58\x4a\xdb\x98\xd0\x63\xf7\x5b\x55" +
	"\x2f\x5c\x11\xdb\x14\x87\xbc\x0b\x17\xc7\x63\x88\xf8\x0e\x9d\x27\x1c\x5d\xdb\x61\x6d\x73\x48\x92\xc2\xca\x6d\xcc" +
	"\x5c\x0f\xe6\x1c\xd7\xca\x07\xb7\x5f\x8a\x1c\xbc\xc8\xfe\xe1\x39\x07\x13\x68\x3c\x9e\x39\xb5\x13\x01\xbb\x11\x39" +
	"\x94\x42\x7b\xe4\xde\xfa\x4e\x57\x12\x93\x26\x8a\xc2\xa1\xf7\x5d\xb3\xf1\xe8\x8c\xa8\xb0\x6b\xd7\xc2\xfb\x1b\x1b" +
	"\x27\x40\x6d\x69\x4d\xa9\xd6\x3f\x2a\xcd\x23\x92\x24\x68\x56\xf5\xa8\xcb\xa5\x5a\x1b\x2c\x06\x97\x12\x69\x7e\xf4" +
	"\xd7\x4f\xbd\xd7\x99\x74\x14\xac\x2d\xee\x3b\x61\x8b\x28\xdb\xe2\x3e\x49\x28\x81\xce\x60\x40\xb6\x47\x10\x7c\x2d" +
	"\x24\x1e\x56\xf2\x84\x46\x2d\xac\x09\x78\x1b\x43\xd7\x09\x4a\xb5\xce\x93\x84\x2a\xe5\x67\xaa\xb5\x9d\xd0\x0d\xfa" +
	"\x64\xad\xed\x4a\x68\xb2\x27\xea\xfa\xcc\xd9\x60\xa5\xd5\x39\x6c\x42\xa8\x3d\x0f\x5e\xf4\x25\x7d\x5c\xd7\x50\xd8" +
	"\x4a\x28\xc3\xbe\xa3\xca\xa5\xd3\x94\x82\x09\x2c\x83\x75\x62\x8d\x20\xb5\xf0\x1e\x4a\xeb\x40\x68\x0d\x35\xa5\xcc" +
	"\x07\x34\x01\xda\xec\x7b\x78\x6c\x8d\xde\x83\x32\x20\x85\x47\xd8\xdb\xc6\x81\x3f\x50\xf6\x4d\x5d\x5b\x17\x3c\x88" +
	"\x26\xd8\x4a\x04\x25\x61\x67\x75\x53\x21\xd4\xce\xee\x14\xd5\x80\x32\xeb\x27\x19\xfc\xb0\xa7\x35\x26\x1a\x1d\x46" +
	"\x30\x6f\x94\xd6\x94\x23\x08\x1b\xec\xbb\x0f\x1d\xc4\x0c\x35\x0e\x0b\x82\xc1\x08\xa4\x6e\x7c\x40\x77\x04\xaa\x64" +
	"\xc5\x43\x85\xbd\x6d\xe0\x46\x98\x00\xc1\xb2\x69\xe5\xcd\x1f\x68\x46\x01\x84\xef\x7d\x74\xa6\xb6\x2f\x7d\x67\x0e" +
	"\x6a\xde\x47\x5a\x38\xca\xc3\x4e\x38\x25\x56\x1a\xc9\x50\x81\x5e\x3a\xb5\x42\x50\x21\x99\x40\xe7\x71\x41\x0e\x73" +
	"\xa8\xf6\x69\x2b\x48\x19\x02\x85\xf8\x75\xeb\xc8\xd8\x02\x97\xa8\x51\x06\xeb\x38\xd2\x1d\xd8\xda\x16\x3e\x83\x4b" +
	"\x8f\x65\xa3\xfb\x00\xdb\x12\xb4\x95\x42\xb7\x31\xf4\x23\x5f\x67\xb6\x78\x37\xb2\x95\x53\x17\xc0\x50\x66\x99\xb2" +
	"\xd3\x8d\xf5\x81\xab\xbd\x53\x4a\x49\x92\xce\xe6\xb1\x96\x7e\xb9\xb8\x84\xf7\x54\x4a\x0c\x24\xae\x44\x8e\xea\xaa" +
	"\x51\xba\x40\x07\xc2\x14\xe0\x1a\x63\xd0\x91\xf5\x2a\x34\x39\xcc\x9f\xcf\x66\x51\xfb\xc4\xec\x94\xb3\xa6\xa2\xfa" +
	"\xe8\x42\x13\xf7\x2f\x85\x05\xc5\x88\x6b\xc8\x16\x0c\x1a\xcd\xae\x45\xf8\xf3\xc5\xc5\xd9\xd5\xd9\xf9\xe9\xaf\x1f" +
	"\x72\x78\x44\xa5\x9a\x4f\xa7\xd5\xbe\x76\xf6\x76\x9f\xc5\x0a\xcd\xa4\xad\xf2\x97\xb3\x97\xb3\x47\x51\x83\x06\x5d" +
	"\xf1\x80\x2f\xd5\x20\x1f\xcb\xaf\x77\xe2\xbf\xce\xcb\xbb\xd3\xde\xc5\xfc\xe9\x8b\x6c\x96\xcd\xb2\xf9\x11\xa7\x8b" +
	"\xa2\x7c\x34\x4a\x45\x5b\x65\x99\xdf\xc9\xa3\xac\x5f\xf0\xdc\x9c\xcf\x66\xd9\xb7\xcf\x59\x75\xfe\xed\xab\xec\xe9" +
	"\x37\xcf\xb3\xf6\xff\x91\x2c\xd3\x36\x11\xf4\x29\x4b\x51\x2b\xfa\xa8\xc5\x9e\x62\xee\xa3\xb0\x61\x19\x6f\xb6\x55" +
	"\xe3\xb1\xa9\xfa\xa6\x4f\x2b\x61\xc4\xba\xd5\x8e\x35\x9d\xf2\x22\x2c\xd0\x45\x6d\x6b\x7c\xa3\x87\xaf\xb4\x35\x16" +
	"\x37\xa0\x03\x75\x67\x4d\xc3\x3a\xb4\xc7\xa7\xb4\x79\x8f\xbb\x37\xe8\x2a\xe4\x6e\x65\xd6\xb4\xdd\xb2\x0d\x67\xe9" +
	"\x50\x1e\x4b\x29\xac\xe9\x4a\xc8\x2d\x9a\x82\xe4\x14\xa2\x54\x99\x80\x6b\x27\xe8\x94\x22\x59\x65\xcd\xda\x16\x2b" +
	"\xfa\x34\x22\xce\xd2\xd8\x4a\x59\xfe\xaa\x55\x8d\x5a\x19\x1c\x3b\xaf\xad\x0f\x64\xfe\x9a\x67\xe2\xc4\x6a\xa5\x42" +
	"\x75\xcd\xdf\x58\x28\x1f\x3f\xe2\xa1\xc0\xdf\x5c\xcf\xed\x57\x50\x15\xa6\x38\x14\xf2\xd8\x2e\x2d\x19\xa4\x8f\x20" +
	"\xfc\x16\x5d\x3a\xe4\xb3\xcd\xbf\xb1\x7d\xbd\xfc\x9e\xff\xff\xaf\xfc\xf3\x06\x88\xb7\xb5\xf5\x38\xe2\x8d\x34\x13" +
	"\x67\x84\x86\xce\x5f\xa4\x83\xed\xec\xe9\x38\xef\x3a\xce\x2c\x71\x87\xe7\xcf\x9f\x91\x30\xda\x19\x38\x4d\x70\x0d" +
	"\x46\x0f\xdd\x59\xa7\xcc\x1a\xf0\xb6\x35\xce\x01\x02\xa2\xc3\x2b\x3a\x22\xda\xa3\x99\x0c\xb5\xa1\x3b\xb7\x36\x5c" +
	"\x7a\x74\x7c\x10\xb1\x2c\x15\x45\xa5\x4c\x4a\xe4\xe7\xce\xb8\xb3\x8e\xff\xc0\x1e\xaf\x2f\xf0\xfd\xcd\xf5\x7b\xf1" +
	"\xea\xfa\xf5\x35\xae\xae\xfb\x91\x97\xe7\x6f\x72\x68\x75\xf2\xe9\xd4\xdb\x0a\xc9\x52\x5e\x5d\xa8\xeb\x1b\x3c\xf6" +
	"\xc5\xcd\x5f\x7a\x47\x5d\x9d\xf9\x8d\x70\x45\x3a\x9b\xd1\xef\xee\xa3\xba\x9e\x67\xad\x81\xcc\x60\xc8\x9f\xbe\x98" +
	"\xcd\x5f\x4c\xff\xec\xbd\xfe\x13\x4f\xb6\xf3\xb4\xdc\xaa\x9a\x90\x2f\x1c\x8a\xc8\x5a\x0f\xba\x5f\x63\xad\x6d\x47" +
	"\xfa\x98\x46\x16\xca\xc7\x63\xa7\xe0\x2e\x3e\x8b\x6c\x39\x24\x22\xc6\xaa\x0b\x11\xc7\xf4\x47\xe5\xb0\x0d\x9c\x74" +
	"\x18\x92\xb2\x6d\x2f\xb9\xc9\x7c\x68\x02\x8b\xc6\x07\x5b\x81\x30\xc6\x06\x46\x12\x59\xd1\x62\x94\x6a\xce\x29\x74" +
	"\x9c\x1b\xc2\x46\x04\xb0\x3b\x74\x4e\x15\x3d\x75\xf1\xc9\x64\x64\x82\x0f\xc0\xc3\x03\xba\x35\x93\xc9\x48\x1c\xcc" +
	"\x5a\x99\xdb\x74\x60\x84\x04\xe5\xec\x73\x2c\xac\x5b\x24\xd0\x2e\x61\xe8\x16\x81\x3f\x02\xaa\xfa\x70\x04\x71\x21" +
	"\x3c\xe9\x6b\x88\x31\x24\x13\xa6\x43\x52\x98\x81\x47\x1d\x90\x97\xc8\x04\xf6\x46\x54\x77\x89\x1b\xf3\x36\xb0\x0e" +
	"\x6a\x47\x91\x12\x01\x0b\xc0\x5b\xe5\x83\x32\xeb\xb3\x9d\x8c\xb4\x72\x72\x20\xf2\x1b\xdb\xe8\x76\x14\xac\xb0\xb4" +
	"\x0e\x41\x8b\xc6\xc8\x0d\x99\x22\xa6\xa6\x0c\x5d\xa4\x18\x1a\x93\x8d\x20\xb6\xe8\xd9\x03\x16\x68\x24\x72\x44\x0f" +
	"\x00\x26\x13\xe2\xab\x35\x4a\x55\xee\x99\x4c\x11\x37\x8f\x6c\x4a\x95\x90\x4c\xe0\xe4\x56\x54\xb5\x46\x98\x1f\x75" +
	"\x35\x0b\x37\x2a\x6c\xbe\x66\x96\x94\xa8\xae\xde\x79\xab\x3f\xa4\x77\x12\xeb\x4d\x5a\x5b\xab\xd3\xf9\xb8\x77\xa9" +
	"\x3e\x62\x0e\x2f\x7f\x52\x0c\xb1\x83\xf1\x74\xc8\xcd\xb5\x06\x6b\xc6\xe1\xab\x77\x92\x91\x8c\x29\x1e\x0d\x91\x3c" +
	"\xbd\x1e\x5a\x32\xa1\x79\x0d\x56\x22\xa6\x51\xa0\x73\x18\x6d\x83\x3e\xd5\x3b\x1e\x60\x3e\x65\x87\x5f\x4e\x0f\xfb" +
	"\xe9\x7f\x66\x7a\x77\xe3\x11\xf7\xb0\x43\x34\xad\x3e\x75\x1d\xe2\xe0\x6b\xd6\x17\xc3\x18\x4f\xfa\x3f\x23\xf9\x1c" +
	"\x90\xc1\xc2\x43\xb1\xc4\xa5\xf6\x09\x8e\xf9\x97\xe1\x68\x4f\xd8\xd9\x43\x51\xf0\x99\x76\xdf\x60\xb0\xf2\x83\x11" +
	"\xb4\x27\xec\xbd\x41\xb4\xfa\x0f\xce\x07\x73\x92\x7b\xe7\x83\xb5\x1f\x8c\x61\xe0\x5d\xf7\x0d\xc7\xc8\xc4\x43\xd1" +
	"\x44\x1a\x46\x5a\x6d\x95\x4c\x26\xb0\xc4\x00\x51\xce\xe3\xb1\x7f\xf1\xc8\xe0\x4d\x00\xe5\xa1\x12\xa6\x10\xc1\xba" +
	"\x7d\xfb\x78\x56\x28\x3f\x90\x82\x1d\xba\xbd\x47\xd9\x38\xec\xd4\x78\xd4\x67\xe6\xf9\xe9\x4c\x3f\x33\x57\x46\x10" +
	"\xbb\xee\xce\xf3\x6b\x57\xc1\xf0\xca\x73\x98\xfd\xd9\xec\x4b\x97\x42\xb4\xf0\xc0\x98\x4f\xe0\x8d\xf1\xe8\x02\xc8" +
	"\xc8\x18\x7a\xe6\x77\x70\xec\xc2\x63\xbe\x5e\xe6\xd3\x69\x61\xa5\xcf\xe2\x4d\x9b\xae\x93\xd3\x6e\xfc\xf4\x60\xfc" +
	"\xf4\x09\xef\xd7\x5d\x67\xf7\x00\x14\xf7\xf0\xee\x25\x0d\x66\xd9\xbc\x15\x69\xdb\xf7\x02\x68\xdc\xa1\xce\xa1\xc0" +
	"\x55\xb3\xee\x85\xa5\x42\x5d\xf8\x61\x10\x74\x64\x22\xef\xbd\xb4\x7d\xed\x0c\x87\xa1\x52\xc8\x0d\x8e\x35\x57\xda" +
	"\xae\xe2\xfb\x47\x4d\x01\x03\x65\x2a\xac\x6c\x6f\x00\xc0\x3f\x1b\x0f\x67\x07\x84\xf7\xc3\xe9\xe5\xf9\xd5\xf9\xc9" +
	"\x4f\x6f\x4e\xdf\x8d\xbb\x57\x8d\xdc\x12\xf1\xe2\xee\x1f\x2e\x17\x6f\x4f\x2e\xae\xde\x1d\xff\x72\x32\x1e\x23\xa4" +
	"\x44\xef\xf9\x6d\xed\xf8\xaf\xcb\xab\xe3\xc5\xe2\x64\xb9\xbc\x7a\x7b\xf2\x61\x3c\x28\x12\xba\x7e\xd0\xf2\x64\x71" +
	"\x7e\x72\x31\x1a\xc4\x97\xfa\x5e\x41\x14\x85\xcb\x21\xff\x66\x36\x9b\xf5\xb2\x0d\x0a\xba\x1b\x8d\xd1\xff\x9a\xf2" +
	"\x7b\x9c\x09\xe9\xc5\xbe\xc6\xf4\xb4\x8e\x54\x0e\xfe\x66\xac\x37\xaa\x2c\xff\xde\x19\x47\xa1\xc3\x66\xd0\x6c\xc3" +
	"\x58\x38\xb5\x43\x37\x36\x88\x86\x18\x6b\xd1\x52\xdb\x41\xce\x9c\x75\x27\x34\xd5\xb0\x1f\xc9\xc3\x86\xa8\xa0\xd5" +
	"\x45\x0e\xcf\x20\x49\xda\x1b\x21\x3f\x22\x8e\xcb\x16\xfe\xf9\xaf\x6e\xb9\xd3\xa5\x06\x82\x05\xd7\x98\xf6\x51\x07" +
	"\xa4\x46\x61\xd0\x01\x9d\xd5\x51\xb4\x88\x92\x85\xe3\x4a\x82\x19\xfc\x91\x7e\xc8\xc4\x69\x47\x62\xbb\x57\xa0\xb3" +
	"\xf7\xc0\x4f\xe1\x42\x83\x57\x1f\xf1\xde\x4b\xae\xb5\x97\xce\x92\x24\x5e\xc2\xfe\x17\x93\x88\x9e\xfe\x6b\x73\x88" +
	"\xe6\x68\x0a\x13\xa0\x8b\x6c\x53\xb7\xd5\x32\xf9\x34\xaf\xe2\xc6\x1f\x73\xdd\xbe\xa5\x92\xec\x44\xf1\x9e\x71\xb7" +
	"\xc3\x3f\xe3\xc7\x58\xff\x2c\x9f\x4e\xbf\xa3\x1b\x56\x1a\x97\xc5\xf7\xbc\x35\x26\xff\x0e\x00\x00\xff\xff\x28\xa7" +
	"\x30\x76\x01\x19\x00\x00")

func bindataCodefreshConfigyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshConfigyaml,
		"codefresh/config.yaml",
	)
}



func bindataCodefreshConfigyaml() (*asset, error) {
	bytes, err := bindataCodefreshConfigyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/config.yaml",
		size: 6401,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588474827, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshDockerDockermd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81" +
	"\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca" +
	"\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9" +
	"\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00" +
	"\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func bindataCodefreshDockerDockermdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshDockerDockermd,
		"codefresh/docker/docker.md",
	)
}



func bindataCodefreshDockerDockermd() (*asset, error) {
	bytes, err := bindataCodefreshDockerDockermdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/docker/docker.md",
		size: 134,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588116509, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": bindataCodefreshAssetsAssetsmd,
	"codefresh/certs/tls.md":     bindataCodefreshCertsTlsmd,
	"codefresh/config.yaml":      bindataCodefreshConfigyaml,
	"codefresh/docker/docker.md": bindataCodefreshDockerDockermd,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"codefresh": {Func: nil, Children: map[string]*bintree{
		"assets": {Func: nil, Children: map[string]*bintree{
			"assets.md": {Func: bindataCodefreshAssetsAssetsmd, Children: map[string]*bintree{}},
		}},
		"certs": {Func: nil, Children: map[string]*bintree{
			"tls.md": {Func: bindataCodefreshCertsTlsmd, Children: map[string]*bintree{}},
		}},
		"config.yaml": {Func: bindataCodefreshConfigyaml, Children: map[string]*bintree{}},
		"docker": {Func: nil, Children: map[string]*bintree{
			"docker.md": {Func: bindataCodefreshDockerDockermd, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
