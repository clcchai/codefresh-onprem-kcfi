// Code generated for package stage by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md
// ../stage/k8s-agent/config.yaml
package stage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _codefreshAssetsAssetsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func codefreshAssetsAssetsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshAssetsAssetsMd,
		"codefresh/assets/assets.md",
	)
}

func codefreshAssetsAssetsMd() (*asset, error) {
	bytes, err := codefreshAssetsAssetsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/assets/assets.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshCertsTlsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00\x00")

func codefreshCertsTlsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshCertsTlsMd,
		"codefresh/certs/tls.md",
	)
}

func codefreshCertsTlsMd() (*asset, error) {
	bytes, err := codefreshCertsTlsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/certs/tls.md", size: 490, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\x1b\xb9\xf5\x7f\x9f\x4f\x71\x10\x3d\xfc\x77\xff\xf0\x8c\xa4\x24\xbb\xc9\x0e\x7a\xf3\x2a\xde\xdd\x20\xd8\xd8\xb0\xec\x74\x83\xa2\x30\x28\xce\x91\xc4\x8a\x43\x8e\x49\x8e\x6c\xa5\xe8\x77\x2f\xce\x21\xe7\x22\x27\x40\x93\xb8\xe8\x4b\x8b\x04\x30\xe7\xdc\x6f\x24\x7f\x54\x8d\x41\x54\x22\x88\x32\x03\xd8\x29\x53\x95\x20\x6d\x85\x6b\x87\x7e\x9b\x01\x28\xe3\x83\xd0\x1a\x1d\xb1\x01\x26\x10\x0e\x0d\x96\x90\x3e\x00\x9e\xd8\x06\x9d\x08\xd6\x3d\x81\x1c\x44\xd3\xe8\xc3\xa0\x0e\xd2\x55\x50\xe1\x5a\x19\x15\x94\x35\x83\xce\x16\x75\x4d\xf2\xc9\xf8\xb4\x6d\x36\x4e\x54\x08\x44\x07\xb9\x15\x2e\xc0\xda\xd9\x1a\xa4\x56\x68\x02\xeb\x45\xb7\x9d\x33\x26\x75\x1f\x31\x32\x80\x89\xaa\xc5\x06\x4b\xd8\x48\x57\x28\x3b\xed\xc3\xc8\xd1\x04\x74\x8d\x53\x1e\x07\xe2\x54\xae\x73\x6b\x1a\x87\x75\xde\xdb\xd1\x22\xa0\x0f\x9d\x35\x8f\x6e\xaf\x24\x9e\x4a\x69\x5b\x13\xde\x8a\x1a\x7b\x47\x7e\xa7\x9a\xc5\xe5\xab\xf8\x4d\x41\x77\x1c\x8e\x7d\x54\xc0\x22\x6c\x3e\x40\xa7\xe5\xb0\xb1\xdd\x7a\x8f\xce\x2b\x6b\xca\x2c\x03\x98\x4c\x26\xf0\x0b\x65\xbe\x17\xba\x45\x9f\x6d\xb4\x5d\x09\x5d\x26\xce\xa2\xaf\xe6\x69\xd3\x40\x65\x6b\xa1\x0c\x18\x51\x63\x06\x54\xef\x6b\xa7\xb9\x1b\xa2\x69\x2e\x9c\x0d\x56\x5a\x5d\xc2\x36\x84\xc6\x67\xd9\x04\x96\xc1\x3a\xb1\x41\x90\x5a\x78\x0f\x6b\xeb\x40\x68\x0d\x0d\x39\xf7\x01\x4d\x80\x94\xa4\x87\x6f\xac\xd1\x07\x50\x06\xa4\xf0\x08\x07\xdb\x3a\xf0\x47\xca\xbe\x6d\x1a\xeb\x82\x07\xd1\x06\x5b\x8b\xa0\x24\xec\xad\x6e\x6b\x84\xc6\xd9\xbd\xa2\x6c\x94\xd9\x7c\x5b\xc0\x8f\x07\xea\xb9\x68\x75\x18\xc5\x7e\xa7\xb4\x86\xd6\x23\x84\x2d\xf6\xec\x63\x07\xd2\x9a\xb5\xda\xb4\x0e\x2b\x0a\x83\x23\x90\xba\xf5\x01\xdd\x09\xa8\x35\x2b\x1e\x2b\x1c\x6c\x0b\x77\xc2\x04\x08\x96\x4d\x2b\x6f\xfe\x8f\x32\x0a\x20\x7c\xef\xa3\x33\xb5\x7b\xe9\x3b\x73\xd0\x68\xa4\x24\x63\x38\xca\xc3\x5e\x38\x25\x56\x1a\xc9\x50\x85\x5e\x3a\xb5\x42\x50\x21\x9b\x40\xe7\x71\x41\x0e\x4b\xa8\x0f\x79\x22\xe4\x1c\x02\x95\xf8\x55\x72\x64\x6c\x85\x4b\xd4\x28\x83\x75\x5c\xe9\x2e\xd8\xc6\x56\xbe\x80\x6b\x8f\xeb\x56\xf7\x05\xb6\x6b\xd0\x56\x0a\x9d\x6a\xe8\x47\xbe\x2e\x6c\xf5\x76\x64\xab\x24\x16\xc0\xae\x5d\xa1\x33\x18\xd0\xd3\x6c\x6f\xad\x0f\x34\x03\x65\xa7\x94\x13\x25\x9f\xcd\xb3\x8c\x66\xe6\xd7\xab\x6b\x78\x47\xc3\xc4\x81\x54\x56\xee\xd0\x71\x55\x57\xad\xd2\x15\x3a\x10\xa6\x02\xd7\x1a\x83\x8e\xac\xd7\xa1\x2d\x61\xfe\x7c\x36\x8b\xda\x67\x66\xaf\x9c\x35\x35\xcd\x47\x57\x1a\xcf\x7b\x5b\x61\x45\x35\xe2\x19\xb2\x15\x07\x8d\x66\x9f\x22\xfc\xe5\xea\xea\xe2\xe6\xe2\xf2\xfc\xb7\xf7\x25\x3c\xa1\x09\x2c\xa7\xd3\xfa\xd0\x38\x7b\x7f\x28\xe2\xd8\x16\xd2\xd6\xe5\xcb\xd9\xcb\xd9\x93\xa8\x41\x42\x37\x2c\xf0\xb9\x1a\xe4\x63\xf9\xe5\x4e\xfc\x97\x79\x79\x7b\xde\xbb\x98\x3f\x7d\x51\xcc\x8a\x59\x31\x3f\xe1\x76\x51\x95\x4f\x46\xad\x48\x53\x56\xf8\xbd\x3c\x29\x86\x5d\x4f\x9f\xf3\xd9\xac\xf8\xfe\x39\xab\xce\xbf\xff\xa1\x78\xfa\xdd\xf3\x22\xfd\x3d\x91\xeb\x3c\x35\x82\x96\x72\x2d\x1a\x45\x8b\x46\x1c\xa8\xe6\x3e\x12\x5b\xa6\xf1\x81\x52\xb7\x1e\xdb\xba\xff\xf4\x79\x2d\x8c\xd8\x24\xed\x38\xd3\x39\x6f\xc2\x0a\x5d\xd4\xb6\xc6\xb7\x7a\x58\xe5\xc9\x98\x35\x01\xef\xc3\x91\xba\xb3\xa6\x65\x1d\x3a\xc6\x72\x3a\xa2\xc6\xec\x2d\xba\x1a\x99\xad\xcc\xc6\xa1\xf7\x6c\xc3\x59\xba\x10\xc6\x54\x2a\x6b\xbe\x12\x72\x87\xa6\x22\x3a\x95\x28\x57\x26\xe0\xc6\x09\x3a\xfa\x89\x56\x5b\xb3\xb1\xd5\x8a\x96\x46\xc4\x2c\x8d\xad\x95\xe5\x55\xa3\x1a\xd4\xca\xe0\xd8\x79\x63\x7d\x20\xf3\xb7\x9c\x89\x13\xab\x95\x0a\xf5\x2d\xaf\xb1\x52\x3e\x2e\x36\xca\x07\x77\xe0\x35\xcf\x73\x5a\x05\x55\x63\x8e\xc3\x20\x8f\xed\xd2\x96\x41\x5a\x04\xe1\x77\xe8\xf2\xa1\x9f\xa9\xff\xc6\xf6\xf3\xf2\xbf\xfe\xff\x77\xf5\x9f\x0f\x40\xbc\x6f\xac\xc7\x11\x8e\xa1\x4c\x9c\x11\x1a\x3a\x7f\x11\x9e\xa4\xec\x33\xbe\xdb\x23\xe3\xc2\xd2\xfd\xff\xfc\xf9\x33\x22\x46\x3b\x97\x89\x55\x42\x70\x2d\x46\x0f\xdd\x5d\xa7\xcc\x06\xf0\x3e\x19\xe7\x02\x01\x41\xb1\x15\x5d\x11\xe9\x6a\x26\x43\xa9\x74\x97\xd6\x86\x6b\x8f\x8e\x2f\x22\xa6\xe5\xa2\xaa\x95\xc9\x5b\x8f\xee\x81\xdc\x85\xf0\xfe\xce\xba\xaa\x84\x03\xde\x5e\xe1\xbb\xbb\xdb\x77\xe2\x87\xdb\x57\xb7\xb8\xba\xed\x25\xaf\x2f\x5f\x97\x90\x74\xca\xe9\xd4\xdb\x1a\xc9\x52\x59\x5f\xa9\xdb\x3b\x3c\xf5\xd5\xdd\x9f\x7a\x47\xdd\x9c\xf9\xad\x70\x55\x3e\x9b\xd1\xff\xfd\x07\x75\x3b\x2f\x92\x81\xc2\x60\x28\x9f\xbe\x98\xcd\x5f\x4c\xff\xe8\xbd\xfe\x3d\x27\xdb\x79\x5a\xee\x54\x43\x91\x2f\x1c\xf2\x3c\xa4\x5a\x74\xec\x57\xd8\x68\x7b\x28\x61\x2d\xb4\x47\x06\x89\x95\xf2\xf1\xda\xa9\x98\xc5\x77\x91\x5d\x0f\x8d\x88\xb5\xea\x4a\x94\x0d\x2d\x24\xd8\x44\x37\xa3\x6f\x84\xc4\x63\x28\x3b\x21\xa9\x45\xdc\x03\x8c\x99\x3a\xc2\x5a\x6d\x22\x80\xcb\x82\x66\x03\x1e\xf5\x7a\xa9\x36\x06\xab\x3e\x50\x89\x0c\xec\xd0\x05\x3f\xf5\x5e\x17\xd2\x11\x50\xdc\xe1\xa1\x23\x36\x4e\xed\x45\xc0\x62\x87\x87\x2c\x8b\x57\x2e\x99\xea\x03\xe8\xc6\x60\x29\x4a\xf0\xa2\xf8\x9b\x67\x40\x3c\x21\x14\x72\x11\x55\x87\x41\xe1\x3a\x30\xb7\x79\xc0\xca\x22\x82\x16\x55\x45\x93\xd7\x7d\x52\xd7\x4c\x02\xa8\xf4\xdd\x74\xcd\x4f\xdf\x71\xdc\x7e\x52\x9a\x25\x78\x02\x7f\x52\x0e\xd3\x98\x49\x87\x21\x5b\xa7\xef\x25\x7f\x96\x40\x73\x0a\x8b\xd6\x07\x5b\x83\x30\xc6\x06\xee\x5b\xc4\x90\x8b\xd1\xc6\xe0\x1d\x00\x0e\xbd\x6d\x9d\x24\x3c\x25\x02\xd8\x3d\x3a\xa7\xaa\x1e\xe8\xf9\x6c\x32\x32\xc1\x70\xe1\x18\xce\x24\x33\x85\x8c\x30\xcb\x6c\x94\xb9\xcf\x87\xd6\x51\x28\x17\x9f\xc2\xac\xdd\x91\x02\xe9\xc0\x83\xee\xc8\xf0\x27\x40\x67\x44\x38\x81\x78\x6c\x7c\xdb\xef\x38\x8e\x21\x9b\x30\x78\x94\xc2\x0c\xa8\xf3\x08\xea\x45\xdc\x74\x30\xa2\x7e\x08\x73\x19\xe5\x82\x75\xd0\x38\xaa\x94\x08\x58\x01\xde\x2b\x1f\x94\xd9\x5c\xec\x65\x44\xe6\x93\x23\x92\xdf\xda\x56\x27\x29\x58\xe1\xda\x3a\x04\x2d\x5a\x23\xb7\x64\x8a\x70\xad\x32\xf4\x0c\xe2\xd0\x18\x9a\x05\xb1\x43\xcf\x1e\xb0\x42\x23\x91\x2b\x7a\x14\x60\x36\x21\x74\xdf\xa0\x54\xeb\x03\x43\x4f\x9a\xd9\x88\x3d\xd5\x1a\xb2\x09\x9c\xdd\x8b\xba\xd1\x08\xf3\x93\x6e\x87\xc3\x9d\x0a\xdb\x2f\xc9\x92\x1a\xd5\x9d\x0e\x7c\x31\x1e\x83\x61\x89\xcd\x36\x6f\xac\xd5\xf9\x7c\xcc\x5d\xaa\x0f\x58\xc2\xcb\x9f\x15\x87\xd8\x85\xf1\x74\xe8\xcd\xad\x06\x6b\xc6\xe5\x6b\xf6\x92\x23\x19\x03\x62\x12\x91\x9c\x5e\x1f\x5a\x36\xa1\xbc\x06\x2b\x31\xa6\x51\xa1\x4b\x18\x5d\x1a\x3e\xd7\x7b\x16\x30\x1f\x63\xe9\xcf\x07\xd3\x7d\xfa\x9f\x48\xef\x61\x3d\xe2\x89\x7f\x1c\x4d\xd2\x27\xd6\x71\x1c\xbc\x2f\x3f\x3b\x8c\x71\xd2\xff\x3a\x92\x4f\x05\x32\x58\x78\x6c\x2c\x71\xab\x7d\x14\xc7\xfc\xf3\xe2\x48\x78\x64\xf6\xd8\x28\x18\x01\x7c\x6d\x31\x58\xf9\xd1\x11\x24\x3c\xf2\xd5\x41\x24\xfd\x47\xf7\x83\x11\xdc\x57\xf7\x83\xb5\x1f\x1d\xc3\x80\x52\xbf\xb6\x1c\x23\x13\x8f\x8d\x26\x82\x56\xd2\x4a\x53\x32\x99\xc0\x12\x03\x44\x3a\xcb\x63\x7f\x45\x16\xf0\x3a\x80\xf2\x50\x0b\x53\x89\x60\xdd\x81\x81\x00\x2b\x0e\x10\x6a\x8f\xee\xe0\x51\xb6\x0e\x3b\x35\x96\xfa\x44\x9e\x1f\x67\xfa\x89\x5c\x39\x82\xc8\x7a\x98\xe7\x97\xee\x82\x01\x16\x1c\x77\x7f\x36\xfb\xdc\xad\x10\x2d\x3c\xb2\xe6\x13\x78\x6d\x3c\xba\x00\x32\x22\x86\x1e\x27\x1f\x5d\xbb\xf0\x0d\x3f\xc6\xcb\xe9\xb4\xb2\xd2\x17\x11\x24\xd1\xe3\x7b\xda\xc9\x4f\x8f\xe4\xa7\xdf\xf2\x79\xdd\x31\x3b\xa4\x16\xcf\xf0\xee\x17\x34\x98\x15\xf3\x44\xd2\xb6\xe7\x02\x68\xdc\xa3\x2e\xa1\xc2\x55\xbb\xe9\x89\x6b\x85\xba\xf2\x83\x10\x74\x60\xa2\xec\xbd\x24\x5e\xca\x70\x10\x95\x42\x6e\x71\xac\xb9\xd2\x76\x15\x7f\x2d\x6a\xa8\x60\xa0\x4c\x8d\xb5\xed\x0d\x00\xf8\x67\x63\x71\x76\x40\xf1\xbe\x3f\xbf\xbe\xbc\xb9\x3c\xfb\xf9\xf5\xf9\xdb\x31\x7b\xd5\xca\x1d\x01\x2f\x66\xff\x78\xbd\x78\x73\x76\x75\xf3\xf6\xf4\xd7\xb3\xb1\x8c\x90\x12\xbd\x67\xd0\x79\xfa\xe7\xe5\xcd\xe9\x62\x71\xb6\x5c\xde\xbc\x39\x7b\x3f\x16\x8a\x80\xae\x17\x5a\x9e\x2d\x2e\xcf\xae\x46\x42\xfc\x13\x48\xaf\x40\x48\xb2\x84\xf2\xbb\xd9\x6c\xd6\xd3\xb6\x28\xe8\x25\x39\x8e\xfe\xb7\x9c\x81\xb3\x09\xf9\xd5\xa1\xc1\xfc\xbc\x89\x50\x0e\xfe\x62\xac\x37\x6a\xbd\xfe\x6b\x67\x1c\x85\x0e\xdb\x41\x33\x95\xb1\x72\x6a\x8f\x6e\x6c\x10\x0d\xe1\xfb\x0e\x5f\x0f\x74\x46\xf8\x7b\xa1\x69\x86\xfd\x88\x1e\xb6\x04\x05\xad\xae\x4a\x78\x06\x59\x96\xde\xcf\x8c\xf6\xc7\x63\x0b\x7f\xff\x47\xb7\xdd\xe9\x09\x08\xc1\x82\x6b\x4d\xfa\x09\x0c\xa4\x46\x61\xd0\x01\xdd\xd5\x91\xb4\x88\x94\x85\xe3\x49\x82\x19\xfc\x3f\xfd\x23\x13\xe7\x1d\x88\xed\x7e\x33\xbb\x78\x07\xfc\x43\xb6\xd0\xe0\xd5\x07\xfc\xea\x2d\x97\xec\xe5\xb3\x2c\x8b\x4f\xd6\xff\x44\x12\xd1\xd3\xbf\x2d\x87\x68\x8e\x52\x98\x00\x3d\xfb\xdb\x26\x4d\xcb\xe4\xe3\xbe\x8a\x3b\x7f\xca\x73\xfb\x86\x46\xb2\x23\xc5\x77\xc6\x43\x86\x7f\xc6\xbf\x67\xfb\x67\xe5\x74\xfa\x3b\x7a\x8f\xe6\x71\x5b\xfc\x21\x3e\xcf\xfe\x19\x00\x00\xff\xff\x32\x13\x61\x01\xab\x18\x00\x00")

func codefreshConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_codefreshConfigYaml,
		"codefresh/config.yaml",
	)
}

func codefreshConfigYaml() (*asset, error) {
	bytes, err := codefreshConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/config.yaml", size: 6315, mode: os.FileMode(420), modTime: time.Unix(1588857954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshDockerDockerMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func codefreshDockerDockerMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshDockerDockerMd,
		"codefresh/docker/docker.md",
	)
}

func codefreshDockerDockerMd() (*asset, error) {
	bytes, err := codefreshDockerDockerMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/docker/docker.md", size: 134, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8sAgentConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\xce\xcc\x4b\xb1\x52\xc8\xb6\x28\xd6\x4d\x4c\x4f\xcd\x2b\x01\x04\x00\x00\xff\xff\x73\xdb\xf5\x15\x1b\x00\x00\x00")

func k8sAgentConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sAgentConfigYaml,
		"k8s-agent/config.yaml",
	)
}

func k8sAgentConfigYaml() (*asset, error) {
	bytes, err := k8sAgentConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-agent/config.yaml", size: 27, mode: os.FileMode(420), modTime: time.Unix(1588688342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": codefreshAssetsAssetsMd,
	"codefresh/certs/tls.md":     codefreshCertsTlsMd,
	"codefresh/config.yaml":      codefreshConfigYaml,
	"codefresh/docker/docker.md": codefreshDockerDockerMd,
	"k8s-agent/config.yaml":      k8sAgentConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"codefresh": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"assets.md": &bintree{codefreshAssetsAssetsMd, map[string]*bintree{}},
		}},
		"certs": &bintree{nil, map[string]*bintree{
			"tls.md": &bintree{codefreshCertsTlsMd, map[string]*bintree{}},
		}},
		"config.yaml": &bintree{codefreshConfigYaml, map[string]*bintree{}},
		"docker": &bintree{nil, map[string]*bintree{
			"docker.md": &bintree{codefreshDockerDockerMd, map[string]*bintree{}},
		}},
	}},
	"k8s-agent": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{k8sAgentConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
