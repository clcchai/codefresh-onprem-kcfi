// Code generated for package stage by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md
// ../stage/k8sagent/config.yaml
package stage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _codefreshAssetsAssetsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func codefreshAssetsAssetsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshAssetsAssetsMd,
		"codefresh/assets/assets.md",
	)
}

func codefreshAssetsAssetsMd() (*asset, error) {
	bytes, err := codefreshAssetsAssetsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/assets/assets.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshCertsTlsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00\x00")

func codefreshCertsTlsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshCertsTlsMd,
		"codefresh/certs/tls.md",
	)
}

func codefreshCertsTlsMd() (*asset, error) {
	bytes, err := codefreshCertsTlsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/certs/tls.md", size: 490, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\x1b\xb9\xf1\x7f\xbf\x9f\x62\x10\xbd\xf8\xdf\xfd\xe1\x5d\xad\x92\xdc\x5d\xb2\xe8\x93\x4f\xf1\xdd\x05\xc1\xc5\x86\x65\xa7\x17\x14\x85\x41\x91\xb3\x12\x2b\x2e\xb9\x26\xb9\xb2\x95\xa2\xdf\xbd\xe0\x90\xfb\x20\x27\x40\x93\xb8\xe8\x9b\x16\x36\x20\xee\x70\x9e\x67\x48\xfe\xc8\x06\x3d\x13\xcc\xb3\x2a\x03\xd8\x49\x2d\x2a\xe0\x46\x60\x6d\xd1\x6d\x33\x00\xa9\x9d\x67\x4a\xa1\x0d\xd3\x00\x16\x15\x32\x87\x15\x2c\x8a\xb2\x78\xf9\x82\x68\x33\xf0\x87\x16\x2b\x48\x1f\x00\x4f\x4c\x8b\x96\x79\x63\x9f\x40\x0e\xac\x6d\xd5\x61\x54\x09\xdc\x0a\x10\x58\x4b\x2d\xbd\x34\x7a\x94\xd9\xa2\x6a\x02\x7f\x32\x38\xef\xda\x8d\x65\x02\x21\xd0\x81\x6f\x99\xf5\x50\x5b\xd3\x00\x57\x12\xb5\x27\xb9\x68\xb6\x37\x46\xa4\xfe\x23\x7a\x0b\x30\x93\x0d\xdb\xe0\x24\xa4\x39\xaf\x73\xa3\x5b\x8b\x4d\x3e\xf0\x2a\xe6\xd1\xf9\x5e\xc2\xa1\xdd\x4b\x8e\xa7\x9c\x9b\x4e\xfb\xb7\xac\xc1\x41\x99\xdb\xc9\x76\x79\xf9\x2a\x7e\x07\xc7\xfa\x19\xf2\x6f\x62\xa5\xf0\x9b\x0f\xd0\x4b\x59\x6c\x4d\x3f\xde\xa3\x75\xd2\xe8\x2a\xcb\x84\xe1\xbb\x98\xd5\x41\xea\x12\x37\xd2\x79\x7b\x58\xb1\x0a\x1c\x2b\xfe\xe6\x28\x3f\x33\xe8\x1c\x5e\x58\xb9\x67\x1e\x7b\x8e\x0a\x6a\xa6\x1c\xd2\x6c\xfb\x60\x2a\x8b\x09\x65\x42\x58\x74\xae\xff\xec\x1c\x5a\x9d\x62\x09\xdf\x2d\x73\xee\xce\x58\xd1\x7f\x73\xa3\x6b\xb9\xf9\x49\x2a\xe2\xc8\x32\xaf\x48\xd4\xa1\xaa\x57\x72\xa3\x51\x8c\x26\x39\x52\xac\x68\xbd\x9b\x3b\xa7\x0a\x6e\x43\xee\x76\x78\xe8\x89\xc9\xa3\x62\x87\x87\x2c\xdb\x75\x6b\xb4\x1a\x3d\x92\xbe\xe0\x82\x6b\x19\xc7\xe3\x2e\x9b\x05\xae\xa5\xd1\x1e\xef\x3d\x35\x52\x4f\xa8\xe5\xa6\xca\xb2\xd9\x6c\x06\xbf\x84\x3e\xd8\x33\xd5\xa1\xcb\x36\xca\xac\x99\x0a\xfa\x58\xdb\x5e\x58\xe3\x0d\x37\xaa\x82\xad\xf7\xad\x23\xe6\xe5\xd0\x6e\xa7\x6d\x0b\xc2\x34\x4c\x6a\xb2\x1d\x45\xae\xad\xaa\x20\xcb\x66\xb0\xf2\xc6\xb2\x0d\x02\x57\xcc\x39\xa8\x8d\x05\xa6\x14\xb4\xa1\x48\xce\xa3\xf6\x90\x9a\xc1\xc1\x37\x46\xab\x03\x48\x0d\x9c\x39\x84\x83\xe9\x2c\xb8\x23\x61\xd7\xb5\xad\xb1\xde\x01\xeb\xbc\x69\x98\x97\x1c\xf6\x46\x75\x0d\x42\x6b\xcd\x5e\x86\xaa\x4b\xbd\xf9\xb6\x80\x1f\x0f\xa1\xff\x59\xa7\xfc\xc4\xcd\x3b\xa9\x54\xa8\x11\xf8\x2d\x0e\xd3\xc7\x06\x62\x85\x3a\x8b\x22\xb8\x41\x1e\x70\xd5\x39\x8f\xf6\x04\x64\x4d\x82\xc7\x02\x07\xd3\xc1\x1d\xd3\x1e\xbc\x21\xd5\xd2\xe9\xff\x0b\x11\x79\x60\x6e\xb0\xd1\xab\xda\xbd\x70\xbd\x3a\x68\x69\x8d\x27\x77\xa4\x83\x3d\xb3\x92\xad\x15\x06\x45\x02\x1d\xb7\x72\x8d\x20\x7d\x36\x83\xde\xe2\x32\x18\xac\xa0\x39\xe4\x89\x90\x93\x0b\x21\xc5\xaf\x92\x21\x6d\x04\xae\x50\x21\xf7\xc6\x52\xa6\x7b\x67\x5b\x23\x5c\x01\xd7\x0e\xeb\x4e\x0d\x09\x36\x35\x28\xc3\x99\x4a\x39\x74\x13\x5b\x17\x46\xbc\x9d\xe8\xaa\xc2\x14\xc0\xd8\x66\x85\x34\xf3\xad\x71\x9e\xba\xbd\x17\xca\x03\x25\x2f\x17\xb1\x97\x7e\xbd\xba\x86\x77\xa1\x95\xc8\x91\xb8\x12\x29\xab\xeb\x4e\x2a\x81\x16\x98\x16\x60\x3b\xad\xd1\x06\xed\x8d\xef\x2a\x58\x3c\x2f\xcb\x28\x7d\xa6\xf7\xd2\x1a\xdd\x84\xfe\xe8\x53\xe3\x68\x9f\x93\x28\x42\x8e\xa8\x87\x8c\x20\xa7\x51\xef\x93\x87\xbf\x5c\x5d\x5d\xdc\x5c\x5c\x9e\xff\xf6\xbe\x82\x27\xa1\x55\xab\xf9\xbc\x39\xb4\xd6\xdc\x1f\x8a\xd8\xa1\x05\x37\x4d\xf5\xa2\x7c\x51\x3e\x89\x12\x81\xe9\x86\x18\x3e\x57\x22\xd8\x58\x7d\xb9\x11\xf7\x65\x56\xde\x9e\x0f\x26\x16\x4f\x7f\x28\xca\xa2\x2c\x16\x27\x54\xae\x90\xe5\x93\x49\x29\x52\x97\x15\x6e\xcf\x4f\x8a\x71\x77\x0c\x9f\x8b\xb2\x2c\xbe\x7f\x4e\xa2\x8b\xef\x5f\x16\x4f\xbf\x7b\x5e\xa4\xdf\x13\x5e\xe7\xa9\x10\x61\xc8\x6b\xd6\xca\x30\x68\xd9\x21\xe4\xdc\x45\x62\x47\x34\xda\x78\x9b\xce\x61\xd7\x0c\x9f\x2e\x6f\x98\x66\x9b\x24\x1d\x7b\x3a\xa7\x45\x28\xd0\x46\x69\xa3\x5d\xa7\xc6\x51\x9e\x94\xc5\x0d\xe8\x48\xdc\x1a\xdd\x91\x4c\xd8\xee\xf3\xb0\x95\x4f\xa7\xb7\x68\x1b\xa4\x69\xa9\x37\x61\xbb\x25\x1d\xd6\x84\x03\x73\x4a\x0d\x69\xcd\xd7\x8c\xef\x50\x8b\x40\x0f\x29\xca\xa5\xf6\xb8\xb1\x2c\x1c\x83\x81\xd6\x18\xbd\x31\x62\x1d\x86\x9a\xc5\x28\xb5\x69\xa4\xa1\x51\x2b\x5b\x54\x52\xe3\xd4\x78\x6b\x9c\x0f\xea\x6f\x29\x12\xcb\xd6\x6b\xe9\x9b\x5b\x1a\xa3\x90\x2e\x0e\xe2\xa1\x40\x63\xea\xe7\x34\xf2\xb2\xc1\x1c\xc7\x46\x9e\xea\x0d\x4b\x06\xc3\xc0\x33\xb7\x43\x9b\x8f\xf5\x4c\xf5\xd7\x66\xe8\x97\xff\xd5\xff\xbf\xab\xfe\xb4\x01\xe2\x7d\x6b\x1c\x4e\x30\x5d\x88\xc4\x6a\xa6\xa0\xb7\x17\xa1\x5a\x8a\x3e\x23\x0c\x14\x27\x2e\x4c\xc0\x0e\xcf\x9f\x3f\x0b\xc4\xa8\x67\xc4\x34\xde\x76\x18\x2d\xf4\x67\x9d\xd4\x1b\xc0\xfb\xa4\x9c\x12\x04\x01\xaa\xae\xc3\x11\x91\x8e\xe6\xa0\x28\xa5\xee\xd2\x18\x7f\xed\xd0\xd2\x41\x44\xb4\x9c\x89\x46\xea\x3c\x80\x9f\x07\x7c\x17\x3d\xfe\x81\x03\xde\x5e\xe1\xbb\xbb\xdb\x77\xec\xe5\xed\xab\x5b\x5c\xdf\x0e\x9c\xd7\x97\xaf\x2b\x48\x32\xd5\x7c\xee\x4c\x83\x41\x53\xd5\x5c\xc9\xdb\x3b\x3c\x75\xe2\xee\x4f\x83\xa1\xbe\xcf\xdc\x96\x59\x91\x97\x65\xf8\xdf\x7f\x90\xb7\x8b\x22\x29\x28\x34\xfa\xea\xe9\x0f\xe5\xe2\x87\xf9\x1f\x9d\x53\xbf\xa7\x60\x7b\x4b\xab\x9d\x6c\x83\xe7\x4b\x8b\xd4\x0f\x29\x17\xfd\xf4\x2b\x6c\x95\xe9\x41\x1f\x01\x66\x21\x5d\x3c\x76\x04\x4d\xd1\x59\x64\xea\xb1\x10\x31\x57\x7d\x8a\x28\xa7\x3f\x49\x8b\x29\x71\xdc\xa2\xcf\xea\xf4\xbd\xa2\x4f\xc2\x43\x33\x58\x76\xce\x9b\x06\x98\xd6\xc6\x93\x27\x11\x15\x2d\x27\xa5\xa6\x9a\x82\x45\x67\x3a\xcb\x03\x42\x60\x1e\xcc\x1e\xad\x95\x62\x80\x2e\x2e\x9b\x4d\x54\xd0\x01\x78\x7c\x40\x27\x35\x05\x8f\xc0\x41\x6f\xa4\xbe\xcf\x47\x44\x18\x5c\xb9\xf8\x14\x0a\xeb\x17\x09\xa4\x25\x0c\xfd\x22\x70\x27\x10\xba\xde\x9f\x40\x5c\x08\xdf\x0e\x3d\x44\x3e\x64\x33\x82\x43\x9c\xe9\x11\x47\x1d\x81\x97\x88\x04\x0e\x9a\x35\x0f\x81\x1b\xe1\x36\x30\x16\x5a\x1b\x32\xc5\x3c\x0a\xc0\x7b\xe9\xbc\xd4\x9b\x8b\x3d\x8f\xb0\x72\x76\x44\x72\x5b\xd3\xa9\xc4\x05\x6b\xac\x8d\x45\x50\xac\xd3\x7c\x1b\x54\x05\xa4\x26\x75\xb8\xe4\x90\x6b\x04\x36\x3c\xdb\xa1\x23\x0b\x28\x50\x73\xa4\x8c\x1e\x39\x98\xcd\x02\x5e\x6d\x91\xcb\xfa\x40\x60\x2a\x60\xf3\x88\xa6\x64\x0d\xd9\x0c\xce\xee\x59\xd3\x2a\x84\xc5\x49\xdf\xb3\x70\x27\xfd\xf6\x4b\xa2\x0c\x85\xea\xfb\x9d\xb6\xfa\x63\x78\xc7\xb1\xdd\xe6\xad\x31\x2a\x5f\x4c\x67\x57\xf2\x03\x56\xf0\xe2\x67\x49\x2e\xf6\x6e\x3c\x1d\x6b\x73\xab\xc0\xe8\x69\xfa\xda\x3d\x27\x4f\xa6\x10\x2f\xb0\x70\x0a\x6f\x70\x2d\x9b\x85\xb8\x46\x2d\xd1\xa7\x49\xa2\x2b\x98\x6c\x83\x2e\x57\x7b\x62\xd0\x1f\xa3\xc3\xcf\x87\x87\x43\xf8\x9f\x08\xef\x61\x3e\xe2\x1e\x76\xec\x4d\x92\x0f\x53\xc7\x7e\xd0\x35\xeb\xb3\xdd\x98\x06\xfd\xaf\x3d\xf9\x94\x23\xa3\x86\xc7\xfa\x12\x97\xda\x47\x7e\x2c\x3e\xcf\x8f\x74\xc2\x96\x8f\xf5\x82\xce\xb4\xaf\x4d\x06\x09\x3f\xda\x83\x74\xc2\x7e\xb5\x13\x49\xfe\xd1\xf5\x20\x4c\xf2\xd5\xf5\x20\xe9\x47\xfb\x30\xe2\xae\xaf\x4d\xc7\x44\xc5\x63\xbd\x89\x30\x2c\x48\xa5\x2e\x99\xcd\x60\x85\x1e\x22\x9d\xf8\x71\x78\xf1\x28\xe0\xb5\x07\xe9\xa0\x61\x5a\x30\x6f\xec\x21\x3d\x6c\x09\xe9\x46\x50\xb0\x47\x7b\x70\xc8\x3b\x8b\xbd\x18\x71\x7d\x22\xce\x8f\x23\xfd\x44\xac\xe4\x41\x9c\x7a\x18\xe7\x97\xae\x82\xf1\x95\xe7\xb8\xfa\x65\xf9\xb9\x4b\x21\x6a\x78\x64\xce\x67\xf0\x5a\x3b\xb4\x1e\x78\x44\x0c\x03\xf2\x3b\x3a\x76\xe1\x1b\xba\x5e\x56\xf3\xb9\x30\xdc\x15\xf1\xa6\x1d\xae\x93\xf3\x9e\x7f\x7e\xc4\x3f\xff\x96\xf6\xeb\x7e\xb2\x7f\x00\x8a\x7b\x78\xff\x76\x06\x65\xb1\x48\x24\x65\x86\x59\x00\x85\x7b\x54\x15\x08\x5c\x77\x9b\x81\x58\x4b\x54\xc2\x8d\x4c\xd0\x83\x89\x6a\xb0\x92\xe6\x52\x84\x23\x2b\x67\x7c\x8b\x53\xc9\xb5\x32\xeb\xf8\xfe\xd1\x86\x84\x81\xd4\x0d\x36\x66\x50\x00\xe0\x9e\x4d\xd9\xc9\x40\xf0\xf7\xfd\xf9\xf5\xe5\xcd\xe5\xd9\xcf\xaf\xcf\xdf\x4e\xa7\xd7\x1d\xdf\x05\xe0\x45\xd3\x3f\x5e\x2f\xdf\x9c\x5d\xdd\xbc\x3d\xfd\xf5\x6c\xca\xc3\x38\x47\xe7\xe8\x6d\xed\xf4\xcf\xab\x9b\xd3\xe5\xf2\x6c\xb5\xba\x79\x73\xf6\x7e\xca\x14\x01\xdd\xc0\xb4\x3a\x5b\x5e\x9e\x5d\x4d\x98\xe8\x52\x3f\x08\x30\x21\x6c\x05\xd5\x77\x65\x59\x0e\xb4\x2d\xb2\x70\x37\x9a\x7a\xff\x5b\x4e\xef\x71\xda\xe7\x57\x87\x16\xf3\xf3\x36\x42\x39\xf8\x8b\x36\x4e\xcb\xba\xfe\x6b\xaf\x1c\x99\xf2\xdb\x51\x32\xa5\x51\x58\xb9\x47\x3b\x55\x88\x3a\x20\x56\x91\xa0\xed\x48\x27\xcc\xba\x67\x2a\xf4\xb0\x9b\xd0\xfd\x36\x40\x41\xa3\x44\x05\xcf\x20\xcb\xd2\x8d\x90\x1e\x11\xa7\x6d\x0b\x7f\xff\x47\xbf\xdc\xc3\xa5\x06\xbc\x01\xdb\xe9\xf4\xa8\x03\x5c\x21\xd3\x68\x21\x9c\xd5\x91\xb4\x8c\x94\xa5\xa5\x4e\x82\x12\xfe\x3f\xfc\x05\x15\xe7\x3d\x88\xed\x5f\x81\x2e\xde\x01\x3d\x53\x33\x05\x4e\x7e\xc0\xaf\x5e\x72\x49\x5f\x5e\x66\x59\xbc\x84\xfd\x27\x82\x88\x96\xfe\x6d\x31\x44\x75\x21\x84\x19\x84\x8b\x6c\xd7\xa6\x6e\x99\x7d\x5c\x57\x76\xe7\x4e\xa9\x6f\xdf\x84\x96\xec\x49\xf1\x9e\xf1\x70\xc2\x3d\xa3\xc7\x58\xf7\xac\x9a\xcf\x7f\x17\x6e\x58\x79\x5c\x16\x7f\xa0\xad\x31\xfb\x67\x00\x00\x00\xff\xff\xfa\xc2\x7d\x7b\x9d\x18\x00\x00")

func codefreshConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_codefreshConfigYaml,
		"codefresh/config.yaml",
	)
}

func codefreshConfigYaml() (*asset, error) {
	bytes, err := codefreshConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/config.yaml", size: 6301, mode: os.FileMode(420), modTime: time.Unix(1588535727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshDockerDockerMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func codefreshDockerDockerMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshDockerDockerMd,
		"codefresh/docker/docker.md",
	)
}

func codefreshDockerDockerMd() (*asset, error) {
	bytes, err := codefreshDockerDockerMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/docker/docker.md", size: 134, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8sagentConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func k8sagentConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sagentConfigYaml,
		"k8sagent/config.yaml",
	)
}

func k8sagentConfigYaml() (*asset, error) {
	bytes, err := k8sagentConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8sagent/config.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1588605719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": codefreshAssetsAssetsMd,
	"codefresh/certs/tls.md":     codefreshCertsTlsMd,
	"codefresh/config.yaml":      codefreshConfigYaml,
	"codefresh/docker/docker.md": codefreshDockerDockerMd,
	"k8sagent/config.yaml":       k8sagentConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"codefresh": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"assets.md": &bintree{codefreshAssetsAssetsMd, map[string]*bintree{}},
		}},
		"certs": &bintree{nil, map[string]*bintree{
			"tls.md": &bintree{codefreshCertsTlsMd, map[string]*bintree{}},
		}},
		"config.yaml": &bintree{codefreshConfigYaml, map[string]*bintree{}},
		"docker": &bintree{nil, map[string]*bintree{
			"docker.md": &bintree{codefreshDockerDockerMd, map[string]*bintree{}},
		}},
	}},
	"k8sagent": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{k8sagentConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
