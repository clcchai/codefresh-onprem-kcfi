// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md

package stage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCodefreshAssetsAssetsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40" +
	"\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50" +
	"\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1" +
	"\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func bindataCodefreshAssetsAssetsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshAssetsAssetsmd,
		"codefresh/assets/assets.md",
	)
}



func bindataCodefreshAssetsAssetsmd() (*asset, error) {
	bytes, err := bindataCodefreshAssetsAssetsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/assets/assets.md",
		size: 88,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588116394, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshCertsTlsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69" +
	"\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb" +
	"\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79" +
	"\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8" +
	"\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f" +
	"\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1" +
	"\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3" +
	"\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5" +
	"\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e" +
	"\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6" +
	"\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00" +
	"\x00")

func bindataCodefreshCertsTlsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshCertsTlsmd,
		"codefresh/certs/tls.md",
	)
}



func bindataCodefreshCertsTlsmd() (*asset, error) {
	bytes, err := bindataCodefreshCertsTlsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/certs/tls.md",
		size: 490,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588103933, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshConfigyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\x1b\xb9\xf1\x7f\xbf\x9f\x62\x10\xbd\xf8\xdf\xfd\xe1\x5d" +
	"\x49\x49\xee\x2e\x59\xf4\xc9\xa7\xf8\xee\x82\xe0\x62\xc3\xb2\xd3\x0b\x8a\xc2\xa0\xb8\xb3\x12\x2b\x2e\xb9\x26\xb9" +
	"\xb2\x95\xa2\xdf\xbd\x98\x21\x77\xb5\x72\x02\x34\x89\x8b\xbe\x69\x61\xc3\xe6\x92\xf3\xf0\x9b\xe1\x90\xfc\x91\xca" +
	"\xf8\x20\xb4\x46\x57\x66\x00\x0e\x35\x0a\x8f\x25\xcc\x8b\x59\xf1\xf2\x45\x06\x30\x81\xb0\x6f\xb1\x04\x6e\x02\x3c" +
	"\xb1\x2d\x3a\x11\xac\x7b\x02\x39\x88\xb6\xd5\x7b\x90\xb6\xc2\xda\xa1\xdf\x80\x74\x15\x54\x58\x2b\xa3\x82\xb2\xa6" +
	"\xd7\xd8\xa0\x6e\x48\x3a\x39\x9a\x76\xed\xda\x89\x0a\x81\xfa\x41\x6e\x84\x0b\x50\x3b\xdb\x80\xd4\x0a\x4d\xc8\x20" +
	"\x39\xec\x1d\x65\x30\x34\x09\x21\xc0\x44\x35\x62\x8d\xe5\xc1\xef\x54\xd6\xb9\x35\xad\xc3\x26\x1f\x24\xb5\x08\xe8" +
	"\x43\x94\x07\x8f\x6e\xa7\x24\x9e\x4a\x69\x3b\x13\xca\xbe\x77\xab\xda\x85\xab\xe8\x93\xa0\x94\x11\x2f\x03\xea\xc3" +
	"\xdd\xa1\xf3\xca\x9a\x34\xe4\xb0\xb5\x25\x64\x59\x65\xe5\x36\xa6\x6b\x80\x70\x89\x6b\xe5\x83\xdb\x2f\x45\x09\x5e" +
	"\x14\x7f\xf3\x29\xfc\xce\xe3\x85\x53\x3b\x11\xb0\x97\x28\xa1\x16\xda\x23\x8f\xb6\x0f\x86\x52\xc6\x44\x55\x39\xf4" +
	"\xbe\xff\xec\x3c\x3a\x23\x1a\xec\xbf\x5b\xe1\xfd\x9d\x8d\xc0\xe9\x5b\x5a\x53\xab\xf5\x4f\x4a\xb3\x44\x96\x05\xcd" +
	"\xaa\x1e\x75\xbd\x54\x6b\x83\xd5\xc1\xa5\x44\x8a\x8d\xfe\xfa\xa9\xf7\xba\x90\x8e\x52\xb4\xc5\x7d\xdf\x99\x10\x15" +
	"\x5b\xdc\x67\xd9\xb6\x5b\xa1\x33\x18\x90\xed\x11\x04\xdf\x0a\x39\xce\x3c\x21\x20\xa9\x85\x35\x01\xef\x53\xda\x52" +
	"\x47\xad\xd6\x65\x96\x4d\x26\x13\xf8\x85\x26\x7a\x27\x74\x87\x3e\x5b\x6b\xbb\x12\x9a\xec\x89\xb6\xbd\x70\x36\x58" +
	"\x69\x75\x09\x9b\x10\x5a\xcf\xc2\x8b\xa1\x9a\x4e\xdb\x16\x2a\xdb\x08\x65\xd8\x77\x54\xb9\x76\x9a\xa6\x60\x02\xcb" +
	"\x60\x9d\x58\x23\x48\x2d\xbc\x87\xda\x3a\x10\x5a\x43\x4b\x13\xe6\x03\x9a\xd0\x4f\xba\x87\x6f\xac\xd1\x7b\x50\x06" +
	"\xa4\xf0\x08\x7b\xdb\x39\xf0\x47\xca\xbe\x6b\x5b\xeb\x82\x07\xd1\x05\xdb\x88\xa0\x24\xec\xac\xee\x1a\x84\xd6\xd9" +
	"\x9d\xa2\x0a\x50\x66\xfd\x6d\x01\x3f\xee\xa9\xbc\x45\xa7\xc3\x08\xe6\x9d\xd2\x9a\xe6\x08\xc2\x06\x87\xe1\x63\x07" +
	"\x71\x86\x3a\x87\x15\xc1\x60\x04\x52\x77\x3e\xa0\x3b\x01\x55\xb3\xe2\xb1\xc2\xde\x76\x70\x27\x4c\x80\x60\xd9\xb4" +
	"\xf2\xe6\xff\x28\xa2\x00\xc2\x0f\x3e\x7a\x53\xdb\x17\xbe\x37\x07\x2d\x2f\xdf\x04\x47\x79\xd8\x09\xa7\xc4\x4a\x23" +
	"\x19\xaa\xd0\x4b\xa7\x56\x08\x2a\x64\x13\xe8\x3d\x2e\xc8\x61\x09\xcd\x3e\x4f\x1d\x39\x43\xa0\x14\xbf\x4a\x8e\x8c" +
	"\xad\x70\x89\x1a\x65\xb0\x8e\x33\xdd\x83\x6d\x6d\xe5\x0b\xb8\xf6\x58\x77\x7a\x48\xb0\xad\x41\x5b\x29\x74\xca\xa1" +
	"\x1f\xf9\xba\xb0\xd5\xdb\x91\xad\x92\x86\x00\x0e\x65\x56\x28\x3b\xdd\x58\x1f\xb8\xda\x7b\xa5\x9c\x7a\xf2\xd9\x3c" +
	"\xd6\xd2\xaf\x57\xd7\xf0\x8e\x4a\x89\x81\xc4\x95\xc8\x59\x5d\x75\x4a\x57\xe8\x40\x98\x0a\x5c\x67\x0c\x3a\xb2\xde" +
	"\x84\xae\x84\xf9\xf3\xd9\x2c\x6a\x9f\x99\x9d\x72\xd6\x34\x54\x1f\x7d\x6a\x3c\x6f\x63\x0a\x2b\xca\x11\xd7\x90\xad" +
	"\x18\x34\x9a\x5d\x42\xf8\xcb\xd5\xd5\xc5\xcd\xc5\xe5\xf9\x6f\xef\x4b\x78\x42\xa5\x5a\x4e\xa7\xcd\xbe\x75\xf6\x7e" +
	"\x5f\xc4\x0a\x2d\xa4\x6d\xca\x17\xb3\x17\xb3\x27\x51\x83\x84\x6e\x58\xe0\x73\x35\xc8\xc7\xf2\xcb\x9d\xf8\x2f\xf3" +
	"\xf2\xf6\x7c\x70\x31\x7f\xfa\x43\x31\x2b\x66\xc5\xfc\x84\xa7\x8b\xb2\x7c\x32\x9a\x8a\x54\x65\x85\xdf\xc9\x93\x62" +
	"\x58\xf0\xfc\x39\x9f\xcd\x8a\xef\x9f\xb3\xea\xfc\xfb\x97\xc5\xd3\xef\x9e\x17\xe9\xff\x89\xac\xf3\x34\x11\xd4\x94" +
	"\xb5\x68\x15\x35\x5a\xb1\xa7\x9c\xfb\xd8\xd9\x71\x1f\x6f\xb4\x4d\xe7\xb1\x6b\x86\x4f\x9f\x37\xc2\x88\x75\xd2\x8e" +
	"\x35\x9d\xf3\x22\xac\xd0\x45\x6d\x6b\x7c\xa7\x0f\xad\x3c\x19\x8b\x1b\xd0\x91\xba\xb3\xa6\x63\x1d\xda\xdd\x73\xda" +
	"\xbc\xc7\xc3\x1b\x74\x0d\xf2\xb0\x32\x6b\xda\x6e\xd9\x86\xb3\x74\x12\x8e\x7b\x29\xad\xf9\x4a\xc8\x2d\x9a\x8a\xfa" +
	"\x29\x45\xb9\x32\x01\xd7\x4e\xd0\x29\x47\x7d\x8d\x35\x6b\x5b\xad\xa8\x69\x44\x8c\xd2\xd8\x46\x59\x6e\xb5\xaa\x45" +
	"\xad\x0c\x8e\x9d\xb7\xd6\x07\x32\x7f\xcb\x91\x38\xb1\x5a\xa9\xd0\xdc\x72\x1b\x2b\xe5\x63\x23\x1e\x0a\xdc\xe6\x7a" +
	"\x4e\xad\xa0\x1a\xcc\xf1\x50\xc8\x63\xbb\xb4\x64\x90\x1a\x41\xf8\x2d\xba\xfc\x30\x9f\x69\xfe\x8d\x1d\xea\xe5\x7f" +
	"\xf3\xff\xdf\x35\xff\xbc\x01\xe2\x7d\x6b\x3d\x8e\x28\x1b\x45\xe2\x8c\xd0\xd0\xfb\x8b\x5c\x2c\x45\x4f\xc7\x79\x3f" +
	"\x70\x61\x89\x3b\x3c\x7f\xfe\x8c\x3a\xa3\x9d\x03\xa7\x09\xae\xc3\xe8\xa1\x3f\xeb\x94\x59\x03\xde\x27\xe3\x9c\x20" +
	"\xa8\x44\x10\x2b\x3a\x22\xd2\xd1\x4c\x86\x52\xea\x2e\xad\x0d\xd7\x1e\x1d\x1f\x44\xdc\x97\x8b\xaa\x51\x26\x27\xf2" +
	"\xf3\x40\xee\xa2\xe7\x3f\xb0\xc7\xdb\x2b\x7c\x77\x77\xfb\x4e\xbc\xbc\x7d\x75\x8b\xab\xdb\x41\xf2\xfa\xf2\x75\x09" +
	"\x49\xa7\x9c\x4e\xbd\x6d\x90\x2c\x95\xcd\x95\xba\xbd\xc3\x53\x5f\xdd\xfd\x69\x70\xd4\xd7\x99\xdf\x08\x57\xe5\xb3" +
	"\x19\xfd\xee\x3e\xa8\xdb\x79\x91\x0c\x14\x06\x43\xf9\xf4\x87\xd9\xfc\x87\xe9\x1f\xbd\xd7\xbf\xe7\x60\x7b\x4f\xcb" +
	"\xad\x6a\x09\xf9\xc2\x21\xd7\x43\xca\x45\x3f\xfc\x0a\x5b\x6d\x7b\xd2\xc7\xb4\xb3\x52\x3e\x1e\x3b\x15\x0f\xf1\x59" +
	"\x64\xeb\xc3\x44\xc4\x5c\xf5\x29\xe2\x9c\xfe\xa4\x1c\xa6\xc4\x49\x87\x21\xab\xd3\xf7\x92\x3f\x99\x0f\x4d\x60\xd1" +
	"\xf9\x60\x1b\x10\xc6\xd8\xc0\x48\x22\x2b\x5a\x8c\xa6\x9a\xe7\x14\x1c\x7a\xdb\x39\x49\x0c\x41\x04\xb0\x3b\x74\x4e" +
	"\x55\x03\x75\xf1\xd9\x64\x64\x82\x0f\xc0\xe3\x03\x3a\x99\x29\x64\x24\x0e\x66\xad\xcc\x7d\x7e\x60\x84\x04\xe5\xe2" +
	"\x53\x2c\xac\x5f\x24\x90\x96\x30\xf4\x8b\xc0\x9f\x00\x55\x7d\x38\x81\xb8\x10\xbe\x1d\x6a\x88\x31\x64\x13\xa6\x43" +
	"\x52\x98\x03\x8f\x3a\x22\x2f\x91\x09\xec\x8d\x68\x1e\x12\x37\xe6\x6d\x60\x1d\xb4\x8e\x32\x25\x02\x56\x80\xf7\xca" +
	"\x07\x65\xd6\x17\x3b\x19\x69\xe5\xe4\xa8\xcb\x6f\x6c\xa7\x93\x14\xac\xb0\xb6\x0e\x41\x8b\xce\xc8\x0d\x99\x22\xa6" +
	"\xa6\x0c\xdd\x62\x18\x1a\x93\x8d\x20\xb6\xe8\xd9\x03\x56\x68\x24\x72\x46\x8f\x00\x66\x13\xe2\xab\x2d\x4a\x55\xef" +
	"\x99\x4c\x11\x37\x8f\x6c\x4a\xd5\x90\x4d\xe0\xec\x5e\x34\xad\x46\x98\x9f\xf4\x35\x0b\x77\x2a\x6c\xbe\x24\x4a\x9a" +
	"\xa8\xbe\xde\x79\xab\x3f\xa6\x77\x12\xdb\x4d\xde\x5a\xab\xf3\xf9\x78\x74\xa9\x3e\x60\x09\x2f\x7e\x56\x0c\xb1\x87" +
	"\xf1\xf4\x30\x37\xb7\x1a\xac\x19\xa7\xaf\xdd\x49\x46\x32\xa6\x78\x24\x22\x39\xbc\x01\x5a\x36\xa1\xb8\x0e\x56\x22" +
	"\xa6\x51\xa2\x4b\x18\x6d\x83\x3e\xd7\x3b\x16\x30\x1f\xb3\xc3\xcf\xa7\x87\x43\xf8\x9f\x08\xef\x61\x3e\xe2\x1e\x76" +
	"\x8c\x26\xe9\xd3\xd0\x31\x0e\xbe\x66\x7d\x36\x8c\x71\xd0\xff\x1a\xc9\xa7\x80\x1c\x2c\x3c\x16\x4b\x5c\x6a\x1f\xe1" +
	"\x98\x7f\x1e\x8e\x74\xc2\xce\x1e\x8b\x82\xcf\xb4\xaf\x4d\x06\x2b\x3f\x1a\x41\x3a\x61\xbf\x1a\x44\xd2\x7f\xf4\x7c" +
	"\x30\x27\xf9\xea\xf9\x60\xed\x47\x63\x38\xf0\xae\xaf\x4d\xc7\xc8\xc4\x63\xd1\x44\x1a\x16\x9f\x9e\xb8\x4a\x26\x13" +
	"\x58\x62\x80\xd8\xcf\xf2\x38\xbc\x78\x14\xf0\x3a\x80\xf2\xd0\x08\x53\x89\x60\xdd\x9e\x5f\x72\x58\xf1\x40\x0a\x76" +
	"\xe8\xf6\x1e\x65\xe7\xb0\x57\x63\xa9\x4f\xc4\xf9\x71\xa4\x9f\x88\x95\x11\xc4\xa1\x87\x71\x7e\xe9\x2a\x38\xbc\xf2" +
	"\x1c\xcf\xfe\x6c\xf6\xb9\x4b\x21\x5a\x78\x64\xce\x27\xf0\xda\x78\x74\x01\x64\x64\x0c\x03\xf3\x3b\x3a\x76\xe1\x1b" +
	"\xbe\x5e\x96\xd3\x69\x65\xa5\x2f\xe2\x4d\x9b\xae\x93\xd3\x5e\x7e\x7a\x24\x3f\xfd\x96\xf7\xeb\x7e\xb0\x7f\x00\x8a" +
	"\x7b\x78\xff\x8e\x06\xb3\x62\x9e\xba\xb4\x1d\x46\x01\x34\xee\x50\x97\x50\xe1\xaa\x5b\x0f\x9d\xb5\x42\x5d\xf9\x83" +
	"\x10\xf4\x64\xa2\x1c\xbc\xa4\xb1\x14\xe1\x41\x54\x0a\xb9\xc1\xb1\xe6\x4a\xdb\x55\x7c\xff\x68\x29\x61\xa0\x4c\x83" +
	"\x8d\x1d\x0c\x00\xf8\x67\x63\x71\x76\x40\x78\xdf\x9f\x5f\x5f\xde\x5c\x9e\xfd\xfc\xfa\xfc\xed\x78\x78\xd5\xc9\x2d" +
	"\x11\x2f\x1e\xfe\xf1\x7a\xf1\xe6\xec\xea\xe6\xed\xe9\xaf\x67\x63\x19\x21\x25\x7a\xcf\x6f\x6b\xa7\x7f\x5e\xde\x9c" +
	"\x2e\x16\x67\xcb\xe5\xcd\x9b\xb3\xf7\x63\xa1\x48\xe8\x06\xa1\xe5\xd9\xe2\xf2\xec\x6a\x24\xc4\x97\xfa\x41\x41\x54" +
	"\x95\x2b\xa1\xfc\x6e\x36\x9b\x0d\x7d\x1b\x14\x74\x37\x1a\xa3\xff\x2d\xe7\xf7\x38\x13\xf2\xab\x7d\x8b\xf9\x79\x1b" +
	"\xa9\x1c\xfc\xc5\x58\x6f\x54\x5d\xff\xb5\x37\x8e\x42\x87\xcd\x41\x33\xa5\xb1\x72\x6a\x87\x6e\x6c\x10\x0d\x31\xd6" +
	"\x2a\x51\xdb\x43\x3f\x73\xd6\x9d\xd0\x54\xc3\x7e\xd4\x1f\x36\x44\x05\xad\xae\x4a\x78\x06\x59\x96\x6e\x84\xfc\x88" +
	"\x38\x2e\x5b\xf8\xfb\x3f\xfa\xe5\x4e\x97\x1a\x08\x16\x5c\x67\xd2\xa3\x0e\x48\x8d\xc2\xa0\x03\x3a\xab\x63\xd7\x22" +
	"\xf6\x2c\x1c\x57\x12\xcc\xe0\xff\xe9\x87\x4c\x9c\xf7\x24\xb6\x7f\x05\xba\x78\x07\xfc\x0a\x2d\x34\x78\xf5\x01\xbf" +
	"\x7a\xc9\x25\x7b\xf9\x2c\xcb\xe2\x25\xec\x3f\x11\x44\xf4\xf4\x6f\x8b\x21\x9a\xa3\x10\x26\x40\x17\xd9\xae\x4d\xd5" +
	"\x32\xf9\x78\x5e\xc5\x9d\x3f\xe5\xba\x7d\x43\x25\xd9\x77\xc5\x7b\xc6\xc3\x01\xff\x8c\x1f\x63\xfd\xb3\x72\x3a\xfd" +
	"\x1d\xdd\xb0\xf2\xb8\x2c\xfe\xc0\x5b\x63\xf6\xcf\x00\x00\x00\xff\xff\x1a\x5e\x0f\xee\x58\x18\x00\x00")

func bindataCodefreshConfigyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshConfigyaml,
		"codefresh/config.yaml",
	)
}



func bindataCodefreshConfigyaml() (*asset, error) {
	bytes, err := bindataCodefreshConfigyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/config.yaml",
		size: 6232,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588201651, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshDockerDockermd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81" +
	"\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca" +
	"\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9" +
	"\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00" +
	"\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func bindataCodefreshDockerDockermdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshDockerDockermd,
		"codefresh/docker/docker.md",
	)
}



func bindataCodefreshDockerDockermd() (*asset, error) {
	bytes, err := bindataCodefreshDockerDockermdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/docker/docker.md",
		size: 134,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588116509, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": bindataCodefreshAssetsAssetsmd,
	"codefresh/certs/tls.md":     bindataCodefreshCertsTlsmd,
	"codefresh/config.yaml":      bindataCodefreshConfigyaml,
	"codefresh/docker/docker.md": bindataCodefreshDockerDockermd,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"codefresh": {Func: nil, Children: map[string]*bintree{
		"assets": {Func: nil, Children: map[string]*bintree{
			"assets.md": {Func: bindataCodefreshAssetsAssetsmd, Children: map[string]*bintree{}},
		}},
		"certs": {Func: nil, Children: map[string]*bintree{
			"tls.md": {Func: bindataCodefreshCertsTlsmd, Children: map[string]*bintree{}},
		}},
		"config.yaml": {Func: bindataCodefreshConfigyaml, Children: map[string]*bintree{}},
		"docker": {Func: nil, Children: map[string]*bintree{
			"docker.md": {Func: bindataCodefreshDockerDockermd, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
