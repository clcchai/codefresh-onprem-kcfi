// Code generated for package stage by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md
package stage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _codefreshAssetsAssetsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func codefreshAssetsAssetsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshAssetsAssetsMd,
		"codefresh/assets/assets.md",
	)
}

func codefreshAssetsAssetsMd() (*asset, error) {
	bytes, err := codefreshAssetsAssetsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/assets/assets.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshCertsTlsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00\x00")

func codefreshCertsTlsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshCertsTlsMd,
		"codefresh/certs/tls.md",
	)
}

func codefreshCertsTlsMd() (*asset, error) {
	bytes, err := codefreshCertsTlsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/certs/tls.md", size: 490, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\x1b\xb9\xf1\x7f\xbf\x9f\x62\x10\xbd\xf8\xdf\xfd\xe1\x5d\x49\x49\xee\x2e\x59\xf4\xc9\xa7\xf8\xee\x82\xe0\x62\xc3\xb2\xd3\x0b\x8a\xc2\xa0\xb8\x23\x89\x15\x97\x5c\x93\x5c\xd9\x4a\xd1\xef\x5e\xcc\x90\xfb\x20\x27\x40\x93\xb8\xe8\x9b\x16\x36\xec\xe5\x70\x9e\x67\x48\xfe\xc8\x1a\x83\xa8\x44\x10\x65\x06\xb0\x53\xa6\x2a\x41\xda\x0a\xd7\x0e\xfd\x36\x03\x50\xc6\x07\xa1\x35\x3a\x9a\x06\x70\xa8\x51\x78\x2c\x61\x5e\xcc\x8a\x97\x2f\x98\x36\x81\x70\x68\xb0\x84\x34\x00\x78\x62\x1b\x74\x22\x58\xf7\x04\x72\x10\x4d\xa3\x0f\x83\x4a\x90\xae\x82\x0a\xd7\xca\xa8\xa0\xac\x19\x64\xb6\xa8\x6b\xe2\x4f\x06\xa7\x6d\xb3\x71\xa2\x42\x20\x3a\xc8\xad\x70\x01\xd6\xce\xd6\x20\xb5\x42\x13\x58\x2e\x9a\xed\x8c\x31\xa9\x1b\x44\x6f\x01\x26\xaa\x16\x1b\x1c\x85\x34\x95\xeb\xdc\x9a\xc6\x61\x9d\xf7\xbc\x5a\x04\xf4\xa1\x93\xf0\xe8\xf6\x4a\xe2\xa9\x94\xb6\x35\xe1\xad\xa8\xb1\x57\xe6\x77\xaa\x59\x5c\xbe\x8a\x63\x72\xac\xec\xfc\x67\x07\x87\x14\xec\xd1\x79\x65\x4d\x3f\xed\xb0\xb1\x25\x64\x59\x65\xe5\x2e\xa6\xb2\x77\xe8\x12\x37\xca\x07\x77\x58\x8a\x12\xbc\x28\xfe\xe6\x39\x29\x13\x68\x3d\x5e\x38\xb5\x17\x01\x3b\x8e\x12\xd6\x42\x7b\xe4\xd9\xe6\xc1\x54\x16\xb3\x28\xaa\xca\xa1\xf7\xdd\xb0\xf5\xe8\x4c\x0a\x80\xc6\x8d\xf0\xfe\xce\xba\xaa\x1b\x4b\x6b\xd6\x6a\xf3\x93\xd2\xcc\x91\x65\x41\xb3\xa8\x47\xbd\x5e\xaa\x8d\xc1\x6a\x30\x29\x91\xe2\xa3\xbf\x7e\xea\xbd\x2e\xa4\xa3\x84\xed\xf0\xd0\x11\x93\x47\xc5\x0e\x0f\x59\xb6\x6b\x57\xe8\x0c\x06\x64\x7d\xe4\x82\x6f\x84\xc4\xe3\xd6\x9a\x10\xd7\xc2\x9a\x80\xf7\x31\x75\x1d\x61\xad\x36\x65\x96\x4d\x26\x13\xf8\x85\x8a\xbf\x17\xba\x45\x9f\x6d\xb4\x5d\x09\x4d\xfa\x44\xd3\x5c\x38\x1b\xac\xb4\xba\x84\x6d\x08\x8d\x67\xe6\x45\xdf\x63\xa7\x4d\x03\x95\xad\x85\x32\x6c\x3b\x8a\x5c\x3b\x4d\x25\x98\xc0\x32\x58\x27\x36\x08\x52\x0b\xef\x61\x6d\x1d\x08\xad\xa1\xa1\x92\xf9\x80\x26\x40\xea\x00\x0f\xdf\x58\xa3\x0f\xa0\x0c\x48\xe1\x11\x0e\xb6\x75\xe0\x8f\x84\x7d\xdb\x34\xd6\x05\x0f\xa2\x0d\xb6\x16\x41\x49\xd8\x5b\xdd\xd6\x08\x8d\xb3\x7b\x45\x3d\xa0\xcc\xe6\xdb\x02\x7e\x3c\x50\xd3\x8b\x56\x87\x91\x9b\x77\x4a\x6b\xaa\x11\x84\x2d\xf6\xd3\xc7\x06\x62\x85\x5a\x87\x15\xb9\xc1\x1e\x48\xdd\xfa\x80\xee\x04\xd4\x9a\x05\x8f\x05\x0e\xb6\x85\x3b\x61\x02\x04\xcb\xaa\x95\x37\xff\x47\x11\x05\x10\xbe\xb7\xd1\xa9\xda\xbd\xf0\x9d\x3a\x68\x78\x61\x27\x77\x94\x87\xbd\x70\x4a\xac\x34\x92\xa2\x0a\xbd\x74\x6a\x85\xa0\x42\x36\x81\xce\xe2\x82\x0c\x96\x50\x1f\xf2\x44\xc8\xd9\x05\x4a\xf1\xab\x64\xc8\xd8\x0a\x97\xa8\x51\x06\xeb\x38\xd3\x9d\xb3\x8d\xad\x7c\x01\xd7\x1e\xd7\xad\xee\x13\x6c\xd7\xa0\xad\x14\x3a\xe5\xd0\x8f\x6c\x5d\xd8\xea\xed\x48\x57\x49\x53\x00\x43\x9b\x15\xca\x4e\xb7\xd6\x07\xee\xf6\x4e\x28\x27\x4a\x3e\x9b\xc7\x5e\xfa\xf5\xea\x1a\xde\x51\x2b\xb1\x23\x71\x25\x72\x56\x57\xad\xd2\x15\x3a\x10\xa6\x02\xd7\x1a\x83\x8e\xb4\xd7\xa1\x2d\x61\xfe\x7c\x36\x8b\xd2\x67\x66\xaf\x9c\x35\x35\xf5\x47\x97\x1a\xcf\x9b\x9b\xc2\x8a\x72\xc4\x3d\x64\x2b\x76\x1a\xcd\x3e\x79\xf8\xcb\xd5\xd5\xc5\xcd\xc5\xe5\xf9\x6f\xef\x4b\x78\x42\xad\x5a\x4e\xa7\xf5\xa1\x71\xf6\xfe\x50\xc4\x0e\x2d\xa4\xad\xcb\x17\xb3\x17\xb3\x27\x51\x82\x98\x6e\x98\xe1\x73\x25\xc8\xc6\xf2\xcb\x8d\xf8\x2f\xb3\xf2\xf6\xbc\x37\x31\x7f\xfa\x43\x31\x2b\x66\xc5\xfc\x84\xcb\x45\x59\x3e\x19\x95\x22\x75\x59\xe1\xf7\xf2\xa4\xe8\x17\x3c\x0f\xe7\xb3\x59\xf1\xfd\x73\x16\x9d\x7f\xff\xb2\x78\xfa\xdd\xf3\x22\xfd\x3f\x91\xeb\x3c\x15\x82\x3e\xe5\x5a\x34\x8a\x3e\x1a\x71\xa0\x9c\xfb\x48\x6c\x99\xc6\x9b\x6d\xdd\x7a\x6c\xeb\x7e\xe8\xf3\x5a\x18\xb1\x49\xd2\xb1\xa7\x73\x5e\x84\x15\xba\x28\x6d\x8d\x6f\xf5\xf0\x95\x27\x65\x71\x03\x3a\x12\x77\xd6\xb4\x2c\x43\x7b\x7c\x4e\x9b\xf7\x78\x7a\x8b\xae\x46\x9e\x56\x66\x43\xdb\x2d\xeb\x70\x96\x4e\xc9\x31\x95\xd2\x9a\xaf\x84\xdc\xa1\xa9\x88\x4e\x29\xca\x95\x09\xb8\x71\x82\xce\x3e\xa2\xd5\xd6\x6c\x6c\xb5\xa2\x4f\x23\x62\x94\xc6\xd6\xca\xf2\x57\xa3\x1a\xd4\xca\xe0\xd8\x78\x63\x7d\x20\xf5\xb7\x1c\x89\x13\xab\x95\x0a\xf5\x2d\x7f\x63\xa5\x7c\xfc\x88\x87\x02\x7f\x73\x3f\xa7\xaf\xa0\x6a\xcc\x71\x68\xe4\xb1\x5e\x5a\x32\x48\x1f\x41\xf8\x1d\xba\x7c\xa8\x67\xaa\xbf\xb1\x7d\xbf\xfc\xaf\xfe\xff\x5d\xf5\xe7\x0d\x10\xef\x1b\xeb\x71\x04\xe4\x28\x12\x67\x84\x86\xce\x5e\xc4\x67\x29\x7a\x3a\xce\xbb\x89\x0b\x4b\xd8\xe1\xf9\xf3\x67\x44\x8c\x7a\x06\x4c\x13\x5c\x8b\xd1\x42\x77\xd6\x29\xb3\x01\xbc\x4f\xca\x39\x41\x40\xf8\x74\x45\x47\x44\x3a\x9a\x49\x51\x4a\xdd\xa5\xb5\xe1\xda\xa3\xe3\x83\x88\x69\xb9\xa8\x6a\x65\x72\x02\x3f\x0f\xf8\x2e\x3a\xfc\x03\x07\xbc\xbd\xc2\x77\x77\xb7\xef\xc4\xcb\xdb\x57\xb7\xb8\xba\xed\x39\xaf\x2f\x5f\x97\x90\x64\xca\xe9\xd4\xdb\x1a\x49\x53\x59\x5f\xa9\xdb\x3b\x3c\xf5\xd5\xdd\x9f\x7a\x43\x5d\x9f\xf9\xad\x70\x55\x3e\x9b\xd1\xef\xfe\x83\xba\x9d\x17\x49\x41\x61\x30\x94\x4f\x7f\x98\xcd\x7f\x98\xfe\xd1\x7b\xfd\x7b\x0e\xb6\xb3\xb4\xdc\xa9\x86\x3c\x5f\x38\xe4\x7e\x48\xb9\xe8\xa6\x5f\x61\xa3\x6d\x07\xfa\x18\x46\x56\xca\xc7\x63\xa7\xe2\x29\x3e\x8b\xec\x7a\x28\x44\xcc\x55\x97\x22\xce\xe9\x4f\xca\x61\x4a\x9c\x74\x18\xb2\x75\x1a\x2f\x79\xc8\x78\x68\x02\x8b\xd6\x07\x5b\x83\x30\xc6\x06\xf6\x24\xa2\xa2\xc5\xa8\xd4\x5c\x53\x70\xe8\x6d\xeb\x24\x21\x04\x11\xc0\xee\xd1\x39\x55\xf5\xd0\xc5\x67\x93\x91\x0a\x3e\x00\x8f\x0f\xe8\xa4\xa6\x90\x11\x38\x98\x8d\x32\xf7\xf9\x80\x08\xc9\x95\x8b\x4f\xa1\xb0\x6e\x91\x40\x5a\xc2\xd0\x2d\x02\x7f\x02\xd4\xf5\xe1\x04\xe2\x42\xf8\xb6\xef\x21\xf6\x21\x9b\x30\x1c\x92\xc2\x0c\x38\xea\x08\xbc\x44\x24\x70\x30\xa2\x7e\x08\xdc\x18\xb7\x81\x75\xd0\x38\xca\x94\x08\x58\x01\xde\x2b\x1f\x94\xd9\x5c\xec\x65\x84\x95\x93\x23\x92\xdf\xda\x56\x27\x2e\x58\xe1\xda\x3a\x04\x2d\x5a\x23\xb7\xa4\x8a\x90\x9a\x32\x74\xb3\x61\xd7\x18\x6c\x04\xb1\x43\xcf\x16\xb0\x42\x23\x91\x33\x7a\xe4\x60\x36\x21\xbc\xda\xa0\x54\xeb\x03\x83\x29\xc2\xe6\x11\x4d\xa9\x35\x64\x13\x38\xbb\x17\x75\xa3\x11\xe6\x27\x5d\xcf\xc2\x9d\x0a\xdb\x2f\x89\x92\x0a\xd5\xf5\x3b\x6f\xf5\xc7\xf0\x4e\x62\xb3\xcd\x1b\x6b\x75\x3e\x1f\xcf\x2e\xd5\x07\x2c\xe1\xc5\xcf\x8a\x5d\xec\xdc\x78\x3a\xd4\xe6\x56\x83\x35\xe3\xf4\x35\x7b\xc9\x9e\x8c\x21\x1e\xb1\x48\x0e\xaf\x77\x2d\x9b\x50\x5c\x83\x96\xe8\xd3\x28\xd1\x25\x8c\xb6\x41\x9f\xeb\x3d\x33\x98\x8f\xd1\xe1\xe7\xc3\xc3\x3e\xfc\x4f\x84\xf7\x30\x1f\x71\x0f\x3b\xf6\x26\xc9\xd3\xd4\xb1\x1f\x7c\xcd\xfa\x6c\x37\xc6\x41\xff\x6b\x4f\x3e\xe5\xc8\xa0\xe1\xb1\xbe\xc4\xa5\xf6\x91\x1f\xf3\xcf\xf3\x23\x9d\xb0\xb3\xc7\x7a\xc1\x67\xda\xd7\x26\x83\x85\x1f\xed\x41\x3a\x61\xbf\xda\x89\x24\xff\xe8\x7a\x30\x26\xf9\xea\x7a\xb0\xf4\xa3\x7d\x18\x70\xd7\xd7\xa6\x63\xa4\xe2\xb1\xde\x44\x18\x46\x52\xa9\x4b\x26\x13\x58\x62\x80\x48\x67\x7e\xec\x5f\x3c\x0a\x78\x1d\x40\x79\xa8\x85\xa9\x44\xb0\xee\x90\x5e\xb3\x2a\xe5\x07\x50\xb0\x47\x77\xf0\x28\x5b\x87\x9d\x18\x73\x7d\x22\xce\x8f\x23\xfd\x44\xac\xec\x41\x9c\x7a\x18\xe7\x97\xae\x82\xe1\x95\xe7\xb8\xfa\xb3\xd9\xe7\x2e\x85\xa8\xe1\x91\x39\x9f\xc0\x6b\xe3\xd1\x05\x90\x11\x31\xf4\xc8\xef\xe8\xd8\x85\x6f\xf8\x7a\x59\x4e\xa7\x95\x95\xbe\x88\x37\x6d\xba\x4e\x4e\x3b\xfe\xe9\x11\xff\xf4\x5b\xde\xaf\xbb\xc9\xee\x01\x28\xee\xe1\xdd\x4b\x1a\xcc\x8a\x79\x22\x69\xdb\xcf\x02\x68\xdc\xa3\x2e\xa1\xc2\x55\xbb\xe9\x89\x6b\x85\xba\xf2\x03\x13\x74\x60\xa2\xec\xad\xa4\xb9\x14\xe1\xc0\x2a\x85\xdc\xe2\x58\x72\xa5\xed\x2a\xbe\x7f\x34\x94\x30\x50\xa6\xc6\xda\xf6\x0a\x00\xfc\xb3\x31\x3b\x1b\x20\x7f\xdf\x9f\x5f\x5f\xde\x5c\x9e\xfd\xfc\xfa\xfc\xed\x78\x7a\xd5\xca\x1d\x01\x2f\x9e\xfe\xf1\x7a\xf1\xe6\xec\xea\xe6\xed\xe9\xaf\x67\x63\x1e\x21\x25\x7a\xcf\x6f\x6b\xa7\x7f\x5e\xde\x9c\x2e\x16\x67\xcb\xe5\xcd\x9b\xb3\xf7\x63\xa6\x08\xe8\x7a\xa6\xe5\xd9\xe2\xf2\xec\x6a\xc4\xc4\x97\xfa\x5e\x40\x54\x95\x2b\xa1\xfc\x6e\x36\x9b\xf5\xb4\x2d\x0a\xba\x1b\x8d\xbd\xff\x2d\xe7\xf7\x38\x13\xf2\xab\x43\x83\xf9\x79\x13\xa1\x1c\xfc\xc5\x58\x6f\xd4\x7a\xfd\xd7\x4e\x39\x0a\x1d\xb6\x83\x64\x4a\x63\xe5\xd4\x1e\xdd\x58\x21\x1a\x42\xac\x55\x82\xb6\x03\x9d\x31\xeb\x5e\x68\xea\x61\x3f\xa2\x87\x2d\x41\x41\xab\xab\x12\x9e\x41\x96\xa5\x1b\x21\x3f\x22\x8e\xdb\x16\xfe\xfe\x8f\x6e\xb9\xd3\xa5\x06\x82\x05\xd7\x9a\xf4\xa8\x03\x52\xa3\x30\xe8\x80\xce\xea\x48\x5a\x44\xca\xc2\x71\x27\xc1\x0c\xfe\x9f\x7e\x48\xc5\x79\x07\x62\xbb\x57\xa0\x8b\x77\xc0\x6f\xd3\x42\x83\x57\x1f\xf0\xab\x97\x5c\xd2\x97\xcf\xb2\x2c\x5e\xc2\xfe\x13\x41\x44\x4b\xff\xb6\x18\xa2\x3a\x0a\x61\x02\x74\x91\x6d\x9b\xd4\x2d\x93\x8f\xeb\x2a\xee\xfc\x29\xf7\xed\x1b\x6a\xc9\x8e\x14\xef\x19\x0f\x27\xfc\x33\x7e\x8c\xf5\xcf\xca\xe9\xf4\x77\x74\xc3\xca\xe3\xb2\xf8\x03\x6f\x8d\xd9\x3f\x03\x00\x00\xff\xff\x5d\xee\xcb\x69\x92\x18\x00\x00")

func codefreshConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_codefreshConfigYaml,
		"codefresh/config.yaml",
	)
}

func codefreshConfigYaml() (*asset, error) {
	bytes, err := codefreshConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/config.yaml", size: 6290, mode: os.FileMode(420), modTime: time.Unix(1588531962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshDockerDockerMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func codefreshDockerDockerMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshDockerDockerMd,
		"codefresh/docker/docker.md",
	)
}

func codefreshDockerDockerMd() (*asset, error) {
	bytes, err := codefreshDockerDockerMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/docker/docker.md", size: 134, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": codefreshAssetsAssetsMd,
	"codefresh/certs/tls.md":     codefreshCertsTlsMd,
	"codefresh/config.yaml":      codefreshConfigYaml,
	"codefresh/docker/docker.md": codefreshDockerDockerMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"codefresh": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"assets.md": &bintree{codefreshAssetsAssetsMd, map[string]*bintree{}},
		}},
		"certs": &bintree{nil, map[string]*bintree{
			"tls.md": &bintree{codefreshCertsTlsMd, map[string]*bintree{}},
		}},
		"config.yaml": &bintree{codefreshConfigYaml, map[string]*bintree{}},
		"docker": &bintree{nil, map[string]*bintree{
			"docker.md": &bintree{codefreshDockerDockerMd, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
