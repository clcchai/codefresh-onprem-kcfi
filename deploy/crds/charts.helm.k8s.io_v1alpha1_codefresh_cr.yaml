apiVersion: charts.helm.k8s.io/v1alpha1
kind: Codefresh
metadata:
  name: example-codefresh
spec:
  # Default values copied from <project_dir>/helm-charts/codefresh/values.yaml
  
  CONTAINER_LOGGER_IMAGE: codefresh/cf-container-logger:0.0.36
  DOCKER_BUILDER_IMAGE: codefresh/cf-docker-builder:1.1.11
  DOCKER_PULLER_IMAGE: codefresh/cf-docker-puller:8.0.1
  DOCKER_PUSHER_IMAGE: codefresh/cf-docker-pusher:6.0.1
  DOCKER_TAG_PUSHER_IMAGE: codefresh/cf-docker-tag-pusher:v2
  FS_OPS_IMAGE: codefresh/fs-ops:1.1.0
  GIT_CLONE_IMAGE: codefresh/cf-git-cloner:9.1.0
  accounts-referrals:
    imageTag: v16
  annotations:
    kubernetes.io/ingress.class: nginx-codefresh
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Request-ID: $request_id";
      proxy_set_header X-Request-ID $request_id;
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.org/redirect-to-https: "false"
  builder:
    replicaCount: 1
  cf-broadcaster:
    dockerRegistry: gcr.io/codefresh-enterprise/
    env:
      RUNTIME_MONGO_DB: codefresh
    image: codefresh/cf-broadcaster
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
  cfanalytic:
    dockerRegistry: gcr.io/codefresh-enterprise/
    enabled: false
    image: codefresh/cf-analytic
  cfapi:
    deploymentTemplateImages: |
      [
        {
          "image": "codefresh/remote-docker:latest",
          "description": "Deploy image to Swarm",
          "link": "https://docs.codefresh.io/docs/docker-swarm",
          "code": " # Required Environment Variables:\n #\n # SSH_KEY - private SSH key, used to access Docker swarm master machine.\n #           need to replace 'newline' character with SPLIT_CHAR character.\n # SPLIT_CHAR - split character, you've used to replace newline in SSH key. Recommendation: use ',' (comma character).\n #\n # Swarm delpoy command arguments:\n #\n # RDOCKER_HOST - remote Docker swarm master machine, accessible over SSH (for example, ubuntu@ec2-public-ip)\n # STACK_NAME - is new Docker stack name\n #\n # Use command below to deploy compose application to a Swarm cluster\n # rdocker ${{RDOCKER_HOST}} docker stack deploy --compose-file docker-stack.yml ${{STACK_NAME}}\n #\n # read more here: https://docs.codefresh.io/docs/docker-swarm"
        },
        {
          "image": "codefresh/cf-deploy-ecs:latest",
          "description": "Deploy image to ECS",
          "link": "https://docs.codefresh.io/docs/amazon-ecs",
          "code": " # Required Environment Variables:\n #\n # AWS_ACCESS_KEY_ID - AWS access key\n # AWS_SECRET_ACCESS_KEY - AWS secret access key\n #\n # ECS deploy command arguments:\n #\n # AWS_REGION - target AWS region\n # CLUSTER_NAME - ECS cluster name\n # SERVICE_NAME - ECS service names\n #\n # Use command below to deploy application to AWS ECS\n \n # cfecs-update ${{AWS_REGION}} ${{CLUSTER_NAME}} ${{SERVICE_NAME}}\n #\n # read more here: https://docs.codefresh.io/docs/amazon-ecs"
        },
        {
          "image": "codefresh/cf-deploy-kubernetes:latest",
          "description": "Deploy image to Kubernetes",
          "link": "https://docs.codefresh.io/docs/kubernetes",
          "code": " # Required Environment Variables:\n #\n # KUBERNETES_USER - The user for the Kubernetes cluster.\n # KUBERNETES_PASSWORD - The password for the Kubernetes cluster.\n # KUBERNETES_SERVER - The server (HTTPS endpoint) of the Kubernetes cluster's API\n #\n # Use command below to deploy compose application to kubernetes\n #\n # /cf-deploy-kubernetes deployment.yml\n #\n # Make sure you change the path of 'deployment.yml' to the path in your repository\n #\n # read more about how to obtain the kubernetes credentials and using the codefresh deploy here: https://docs.codefresh.io/docs/kubernetes\n"
        }
      ]
    dockerRegistry: gcr.io/codefresh-enterprise/
    env:
      AUDIT_AUTO_CREATE_DB: true
      LOGGER_LEVEL: debug
      ON_PREMISE: true
      RUNTIME_MONGO_DB: codefresh
    expirationURL: https://codefresh.io/contact-sales
    github:
      apiPathPrefix: /api/v3
    image: codefresh/cf-api
    imageTag: cf-onprem-v1.0.96
    rbacEnable: true
  cfapi-buildmanager:
    replicaCount: 0
  cfapi-cacheevictmanager:
    replicaCount: 0
  cfapi-downloadlogmanager:
    replicaCount: 0
  cfapi-endpoints:
    replicaCount: 0
  cfapi-eventsmanagersubscriptions:
    replicaCount: 0
  cfapi-terminators:
    replicaCount: 0
  cfsign:
    dockerRegistry: gcr.io/codefresh-enterprise/
    image: codefresh/cf-tls-sign
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
  cfui:
    dockerRegistry: gcr.io/codefresh-enterprise/
    dockercfg: placeholder
    env:
      ON_PREMISE: true
    image: codefresh/cf-ui
    imageTag: cf-onprem-v1.0.96
    logglyToken: invalid-token
    newrelicLicenseKey: invalid-key
    segmentKey: invalid-key
  chartmuseum:
    env:
      open:
        ALLOW_OVERWRITE: "true"
        DEBUG: "true"
        DEPTH: 2
        DISABLE_API: "false"
        DISABLE_METRICS: "false"
        INDEX_LIMIT: 2500
        STORAGE: local
    ingress:
      annotations: null
      enabled: false
      hosts:
      - chartmuseum.local
    localHelmRepo: true
    publicHelmRepo: false
  charts-manager:
    disablePublicRepos: true
    dockerRegistry: gcr.io/codefresh-enterprise/
    environment:
      API_URI: cf-cfapi
      CONTEXT_MANAGER_URI: cf-context-manager
      EVENTBUS_URI: amqp://cf-rabbitmq
      MONGO_URI: mongodb://mongodb:27017/charts-manager
      POSTGRES_HOST: cf-postgresql
    image: codefresh/charts-manager
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
  cluster-providers:
    dockerRegistry: gcr.io/codefresh-enterprise/
    gcAuthClientID: ""
    gcAuthClientSecret: ""
    image: codefresh/cluster-providers
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
    safeSecret: ""
  consul:
    DatacenterName: codefresh-onprem
    Memory: 64Mi
    Replicas: 1
    nodeSelector: {}
  context-manager:
    dockerRegistry: gcr.io/codefresh-enterprise/
    environment:
      EVENTBUS_URI: amqp://cf-rabbitmq
      MONGO_URI: mongodb://mongodb:27017/context-manager
      POSTGRES_HOST: cf-postgresql
    image: codefresh/context-manager
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
    safeSecret: ""
  cronus:
    event:
      action: s
    image:
      dockerRegistry: gcr.io/codefresh-enterprise/
    imageTag: cf-onprem-v1.0.96
  dockercfg: placeholder
  engineImage: codefresh/engine:1.88.12
  firebaseSecret: placeholder
  firebaseUrl: https://codefresh-on-prem.firebaseio.com/on-prem
  getRuntimeEnvs: files/on-prem/runtimeEnvironments.json
  global:
    accountsReferralsPort: 9000
    accountsReferralsService: accounts-referrals
    appProtocol: http
    bitbucketClientID: invalid-id
    bitbucketClientSecret: invalid-secret
    broadcasterPort: 80
    broadcasterService: cf-broadcaster
    builderService: builder
    cfapiInternalPort: 3000
    cfapiService: cfapi
    cfcrDomain: ""
    chartsManagerPort: 9000
    chartsManagerService: charts-manager
    clusterProvidersPort: 9000
    clusterProvidersService: cluster-providers
    codefresh: codefresh
    consulHttpPort: 8500
    consulService: consul
    contextManagerPort: 9000
    contextManagerService: context-manager
    curlImage: codefresh/curl
    dindCPU: 100m
    dindCPULimits: 1000m
    dindImage: docker:18.09-dind
    dindMemory: 256Mi
    dindMemoryLimits: 4096Mi
    dindProviderPort: 9000
    dindProviderService: dind-provider
    gceProject: ""
    githubClientID: placeholder
    githubClientSecret: placeholder
    githubInternalToken: placeholder
    gitlabClientID: placeholder
    gitlabClientSecret: placeholder
    helmRepoManagerService: helm-repo-manager
    hermesService: hermes
    internalServiceTolerations:
    - effect: NoSchedule
      key: nodeType
      operator: Equal
      value: internal
    kubeIntegrationPort: 9000
    kubeIntegrationService: kube-integration
    launchDarklySdkKey: dummy-key
    mongoPort: 27017
    mongoService: mongodb
    mongoURI: mongodb://cfuser:mTiXcU2wafr9@mongodb:27017
    mongodbDatabase: codefresh
    mongodbImage: bitnami/mongodb:4.0.3
    mongodbPassword: mTiXcU2wafr9
    mongodbRootPassword: XT9nmM8dZD
    mongodbRootUser: root
    mongodbUsername: cfuser
    natsPort: 4222
    natsService: nats
    onboardingStatusPort: 80
    onboardingStatusService: onboarding-status
    onprem: true
    paymentsService: payments
    paymentsServicePort: 9000
    pipelineManagerPort: 9000
    pipelineManagerService: pipeline-manager
    postgresDatabase: codefresh
    postgresPassword: eC9arYka4ZbH
    postgresService: postgresql
    postgresUser: postgres
    rabbitService: rabbitmq
    redisService: redis
    registryPort: 5000
    registryService: registry
    runnerService: runner
    runtimeEnvironmentManagerPort: 80
    runtimeEnvironmentManagerService: runtime-environment-manager
    runtimeMongoURI: mongodb://cfuser:mTiXcU2wafr9@mongodb:27017/codefresh
    runtimeRedisDb: "1"
    runtimeRedisHost: cf-redis
    runtimeRedisPassword: hoC9szf7NtrU
    runtimeRedisPort: "6379"
    tlsSignPort: 4999
    tlsSignService: cfsign
  helm-repo-manager:
    image:
      dockerRegistry: gcr.io/codefresh-enterprise/
      name: codefresh/helm-repo-manager
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
  hermes:
    image:
      dockerRegistry: gcr.io/codefresh-enterprise/
    imageTag: cf-onprem-v1.0.96
  imagePullPolicy: IfNotPresent
  ingress:
    enabled: true
    rbacEnable: true
  internal-status-page:
    imageTag: v9
  k8s-monitor:
    replicaCount: 0
  kube-integration:
    dockerRegistry: gcr.io/codefresh-enterprise/
    image: codefresh/kube-integration
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
  kubectlImage: codefresh/generate-certs:latest
  logglyToken: invalid-token
  mailer:
    imageTag: v12
  mongoSeedJobScript: files/on-prem/mongoSeedJobScript
  mongodb:
    image: bitnami/mongodb:3.6.13-r0
    mongodbRootPassword: XT9nmM8dZD
    nodeSelector: {}
    resources:
      requests:
        memory: 64Mi
  nomios:
    image:
      dockerRegistry: gcr.io/codefresh-enterprise/
    imageTag: cf-onprem-v1.0.96
  onboarding-status:
    dockercfg: placeholder
    enabled: false
    image: gcr.io/codefresh-enterprise/codefresh/onboarding-status
    newrelicLicenseKey: invalid-key
  payments:
    imageTag: v34
  pipeline-manager:
    dockerRegistry: gcr.io/codefresh-enterprise/
    environment:
      INTERNAL_API_URI: http://cf-cfapi:9007
      MONGO_URI: mongodb://mongodb:27017/pipeline-manager
    image: codefresh/pipeline-manager
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
    safeSecret: ""
    stepsCatalogGithubToken: ""
  postgresql:
    nodeSelector: {}
    postgresDatabase: codefresh
    postgresPassword: eC9arYka4ZbH
    postgresUser: postgres
    resources:
      requests:
        memory: 128Mi
  rabbitmq:
    nodeSelector: {}
    rabbitmqPassword: cVz9ZdJKYm7u
    rabbitmqUsername: user
  rbacEnable: true
  redis:
    nodeSelector: {}
    redisPassword: hoC9szf7NtrU
    resources:
      requests:
        memory: 64Mi
  registry:
    mainChart: codefresh
    nodeSelector: {}
  rollbarAccessToken: ""
  runtime-environment-manager:
    dockerRegistry: gcr.io/codefresh-enterprise/
    dockercfg: placeholder
    enabled: true
    env:
      ON_PREMISE: true
    image: codefresh/runtime-environment-manager
    imageTag: cf-onprem-v1.0.96
    newrelicLicenseKey: invalid-key
  runtime_envs:
  - inCluster: true
    name: codefresh-inc
    namespace: dinds
    selectorRuntimeEnv: codefresh-inc
  salesforce-reporter:
    imageTag: v17
  segment-reporter:
    imageTag: v29
  servicePort: 80
  slackAppID: "4027524866.65820083427"
  slackAppSecret: placeholder
  stripePublicKey: ""
  stripeSecretKey: sk_test_8AnaAlccXXkcPXP7vrgKZQyy
  stripeWebhookSecret: ""
  tags:
    infra: true
    old-scheduler: false
    saas: false
  tasker-kubernetes:
    dockerRegistry: gcr.io/codefresh-enterprise/
    image: codefresh/tasker-kubernetes
    imageTag: cf-onprem-v1.0.96
    replicaCount: 1
  workflow-baseline-invoker:
    imageTag: v5
  
