// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml

package stage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCodefreshCertsTlsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69" +
	"\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb" +
	"\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79" +
	"\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8" +
	"\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f" +
	"\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1" +
	"\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3" +
	"\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5" +
	"\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e" +
	"\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6" +
	"\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00" +
	"\x00")

func bindataCodefreshCertsTlsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshCertsTlsmd,
		"codefresh/certs/tls.md",
	)
}



func bindataCodefreshCertsTlsmd() (*asset, error) {
	bytes, err := bindataCodefreshCertsTlsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/certs/tls.md",
		size: 490,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588103933, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshConfigyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6f\xdb\xc8\x11\x7f\xe7\x5f\x31\x38\x3d\xf4\x52\x98\x14\x15" +
	"\xfb\x2e\x39\xa2\x5f\x3e\xc5\xbd\x06\xc1\xc5\x86\x65\xa7\x09\x8a\xc2\x58\x2d\x87\xd2\x42\xcb\x5d\x6a\x67\x49\x5b" +
	"\x29\xfa\xbf\x17\xfb\x41\x8a\xb2\x0d\xd4\xb1\x8b\xbe\xb4\x48\x90\xac\x66\x76\x66\x7e\xf3\xb1\x3b\xb3\x5c\x49\xbd" +
	"\x64\xb2\x48\x92\xc9\x64\x02\x78\xd7\x68\x42\xe0\xba\xc4\xca\x20\xad\x41\x28\x8b\x46\x31\x09\x06\x57\x82\xac\xd9" +
	"\x41\x65\x74\x0d\x42\xad\x0c\x12\x25\x00\x93\x9e\x71\xa1\x8d\x2d\xe0\xe4\xe4\xd8\x11\x83\x9e\xcb\xc8\x2a\xc0\x9a" +
	"\x16\x83\x05\xae\x55\x25\x56\xad\x11\x6a\x05\x78\x17\x95\xd7\x5a\xad\x34\x94\xcc\xb2\x25\x23\x04\x42\xd3\x09\x8e" +
	"\x4e\x91\xe7\x94\xcb\x4b\xad\xed\x35\xa1\x29\xa0\xde\xa5\x9e\x96\xb2\xb2\x16\x2a\x6d\x09\xcd\xbd\x7d\x17\x8c\xe8" +
	"\x56\x9b\xb2\x80\x1d\x6e\xaf\xf0\xd3\xed\xf6\x13\xfb\x69\xfb\x6e\x8b\xcb\xed\xb0\xf3\xfa\xf2\x7d\x01\x51\xa6\x98" +
	"\x4e\x49\xd7\xe8\x34\x15\xf5\x95\xd8\xde\xe2\x29\x95\xb7\x7f\x1a\x0c\x71\xd9\x92\x45\x93\xd2\x9a\x99\x32\xcd\x73" +
	"\xf7\xb7\xfb\x2a\xb6\xb3\x2c\x2a\xc8\x14\xda\xe2\xf5\x9b\x7c\xf6\x66\xfa\x47\x22\xf9\x7b\xef\x6c\x6f\x69\xb1\x11" +
	"\x8d\x43\x3e\x37\xc8\xac\xd0\x2a\xc6\xa2\x67\xbf\xc3\x46\xea\x5d\x01\x15\x93\x84\x00\x30\x81\x52\x10\x5b\x4a\x24" +
	"\x28\x3d\xab\x46\x65\x41\x57\xfb\x44\x84\x58\xf5\x21\x4a\x00\x58\xd3\x5c\x18\x6d\x35\xd7\xb2\x80\xb5\xb5\x0d\xf9" +
	"\x40\xcf\x87\x1c\x9e\x36\x0d\x94\xba\x66\x42\x81\x62\x35\x06\x91\x6b\x23\x0b\xd8\xe9\xd6\xa4\x81\x95\x71\x5d\x27" +
	"\xc9\x04\x16\x56\x1b\xb6\x42\xe0\x92\x11\x41\xa5\x0d\x30\x29\xa1\x41\x43\x82\xac\xc3\x12\x2d\x13\x7c\xaf\x95\xdc" +
	"\x81\x50\xc0\x5d\xce\x9c\x2a\xa0\x03\x61\x6a\x9b\x46\x1b\x4b\xc0\x5a\xab\x6b\x66\x05\x87\x4e\xcb\xb6\x46\x68\x8c" +
	"\xee\x04\x09\xad\x84\x5a\xbd\xca\xe0\xe7\x1d\x94\x58\xb1\x56\xda\x11\xea\x5b\x21\x25\xb4\x84\x60\xd7\x38\xb0\x0f" +
	"\x0d\xf4\xb5\x84\xa5\x83\xe1\x11\xc4\x64\x1d\x81\xa8\xbc\xe0\xa1\xc0\x4e\xb7\x70\xcb\x94\x05\xab\xbd\x6a\x41\xea" +
	"\x37\xce\x23\x0b\x8c\x06\x1b\xbd\xaa\xcd\x5b\xea\xd5\x41\x23\xd1\x39\x19\xe0\x08\x82\x8e\x19\xe1\xb2\xe4\x14\x95" +
	"\x48\xdc\x88\x25\x82\xb0\xc9\x04\x7a\x8b\x73\x67\xd0\x97\x6b\x24\xa4\x1e\x82\x0b\xf1\xbb\x68\x48\xe9\x12\x17\x28" +
	"\x91\x5b\x6d\x7c\xa4\x7b\xb0\x8d\x2e\x29\x83\x6b\xc2\xaa\x95\x43\x80\x75\x05\x52\x73\x26\x63\x0c\x69\x64\xeb\x42" +
	"\x97\x1f\x47\xba\x0a\xc7\x02\xd8\xb4\x4b\x34\x0a\x2d\x52\x26\xf4\x74\xad\xc9\xba\xec\x17\xbd\x50\xea\x28\x69\x3e" +
	"\x0b\xc7\xf2\xd7\xab\x6b\xf8\xc4\x64\x8b\x1e\x48\xa9\xf9\x06\x8d\x8f\xea\xb2\x15\xb2\x44\x03\x4c\x95\x60\x5a\xa5" +
	"\xd0\x38\xed\xb5\x6d\x0b\x98\x9d\xe4\x79\x90\x3e\x53\x9d\x30\x5a\xf9\x5a\xed\x43\x43\xae\xca\xa4\xc0\xd2\xc5\xc8" +
	"\xd7\x90\x2e\x3d\x68\x54\x5d\x44\xf8\x97\xab\xab\x8b\x9b\x8b\xcb\xf3\xcf\x5f\x0a\xf8\xce\x55\x6e\x31\x9d\xd6\xbb" +
	"\xc6\xe8\xbb\x5d\xb6\xaf\xca\xe2\x6d\xfe\x36\xff\x2e\x48\xb8\x4d\x37\x7e\xc3\x53\x25\x9c\x8d\xc5\xb7\x1b\xa1\x6f" +
	"\xb3\xf2\xf1\x7c\x30\x31\x7b\xfd\x26\xcb\xb3\x3c\x9b\x1d\xf9\x74\xb9\x28\x1f\x8d\x52\x11\xab\x2c\xa3\x8e\x1f\x65" +
	"\xc3\x3d\xeb\x7f\xce\xf2\x3c\xfb\xf1\xc4\x8b\xce\x7e\xfc\x29\x7b\xfd\xc3\x49\x16\xff\x3f\xe2\x55\x1a\x13\xe1\x96" +
	"\xbc\x62\x8d\x70\x8b\x86\xf9\xfb\x81\x02\xb1\xf5\x34\xbe\x66\xc6\xd6\x2d\x61\x5b\x0f\x3f\x29\xad\x99\x62\xab\x28" +
	"\x1d\xef\x33\x7f\x08\x4b\x34\x41\x5a\x2b\x6a\xe5\x7e\x95\x46\x65\x5a\x59\xbc\xb3\x07\xe2\x46\xab\xd6\xcb\xac\x51" +
	"\xd6\xa9\xc1\x46\x8f\xd9\x6b\x34\x35\x7a\x76\xec\x11\x5e\x87\xd1\x52\x06\x7e\x4f\x75\x61\x4d\x97\x8c\x6f\x50\x95" +
	"\x8e\xee\x42\x94\xba\x4b\x6e\x65\xfc\x3d\xe9\x68\xf1\x7e\x75\x4b\xc5\x82\x97\x4a\xd7\x42\xfb\x55\x23\x1a\x94\x42" +
	"\xe1\xd8\x78\xa3\xc9\x3a\xf5\x5b\xef\x89\x61\xcb\xa5\xb0\xf5\xd6\xaf\xb1\x14\x14\x16\xa1\x27\xf9\xb5\xaf\xe7\xb8" +
	"\xb2\xa2\xc6\x14\xf7\x85\x3c\xd6\xeb\x8e\x0c\xba\x85\x65\xb4\x41\x93\xee\xf3\x19\xf3\xaf\xf4\x50\x2f\xff\xcf\xff" +
	"\xff\x56\xfe\xfd\x05\xf8\x67\x61\x30\x8e\x2e\xdc\xa0\x4d\xaa\xf8\x7b\xe1\x7f\x16\x90\x24\x56\x52\x91\x00\x10\xca" +
	"\x6a\x21\x56\x0a\xcb\xd8\xf3\x13\x00\x8e\x6e\x72\x72\xff\xd2\x94\x48\x66\xdc\xd8\x04\x60\x83\xbb\x9e\xd8\x18\xd1" +
	"\x31\x8b\xd9\x06\x77\xce\x1c\xcc\x5b\xb2\xba\x06\xa6\x94\xb6\x3e\x58\xa1\x51\xcf\x47\x53\x9b\x0f\x32\x18\x24\xdd" +
	"\x1a\xee\x9a\x16\xb3\xa0\x3b\x34\x46\x94\x43\x37\xa5\x64\x32\x52\xe1\xef\xe4\xc3\x9e\x11\xd5\x64\x3c\xf4\x32\xb5" +
	"\x12\xea\x2e\x1d\x6a\xd6\x43\xb9\x78\x6c\x30\xe8\xf3\x06\xb1\xaa\xa0\xcf\x0b\x1d\x81\x4b\x84\x3d\x82\x90\x9b\x57" +
	"\x43\x0b\xf7\x18\x92\x89\xef\xd0\x9c\xa9\x7d\x6b\x3f\xe8\xa7\xa1\x39\xed\x14\xab\xef\xcf\x12\x7e\x94\x00\x6d\xa0" +
	"\x31\x2e\xe4\xcc\x62\x09\x78\x27\xc8\x0a\xb5\xba\xe8\x78\x18\x7c\x26\x07\x24\x5a\xeb\x56\xc6\x5d\xb0\xc4\x4a\x1b" +
	"\x04\xc9\x5a\xc5\xd7\x4e\x95\x1b\x1e\x84\xb2\x4c\x4a\x0f\xcd\xf7\x3f\xcb\x36\x48\xde\x02\x96\xa8\x38\xfa\x88\x1e" +
	"\x00\x4c\x26\x6e\x84\x6a\x90\x8b\x6a\xe7\xfb\xbb\x4b\x78\x68\xf0\xa2\x82\x64\x02\x67\x77\xac\x6e\x24\xc2\xec\xa8" +
	"\x1f\x3f\xe1\x56\xd8\xf5\xb7\x78\xe9\x12\xd5\x8f\xae\xfe\xf6\x39\x9c\x38\x38\x36\xeb\xb4\xd1\x5a\xa6\xb3\x31\x77" +
	"\x21\xbe\x62\x01\x6f\x7f\x11\x1e\x62\x0f\xe3\xf5\x3e\x37\x5b\x09\x5a\x8d\xc3\xd7\x74\xdc\x23\x19\x4f\x1d\x6e\x0b" +
	"\xf7\xee\x0d\xd0\x92\x89\xf3\x6b\xaf\x25\x60\x1a\x05\xba\x80\xd1\xc9\xa4\x54\x76\x7e\x83\x7a\x38\xb0\x3c\x7d\x62" +
	"\x19\xdc\x7f\xc4\xbd\xfb\xf1\x08\xcf\x91\x43\x34\x51\xde\xb1\x0e\x71\xb8\x01\xfc\xe9\x30\xc6\x4e\xff\x7b\x24\x8f" +
	"\x01\xd9\x6b\x78\x29\x96\x70\xd4\x1e\xe0\x98\x3d\x0d\x47\xbc\xf4\xf3\x97\xa2\xf0\xd7\xec\x73\x83\xe1\x85\x5f\x8c" +
	"\x20\x5e\xfa\xcf\x06\x11\xe5\x5f\x9c\x0f\xdf\x26\x9f\x9d\x0f\x2f\xfd\x62\x0c\xfb\x51\xe0\xb9\xe1\x18\xa9\x78\x29" +
	"\x9a\x30\x19\x38\xa9\x58\x25\x93\x09\x2c\xd0\x42\xa0\xfb\xfd\x08\x4d\x7c\xbc\x67\xf0\xde\x82\x20\xa8\x99\x2a\x99" +
	"\xd5\x66\x97\xb8\x0b\xc2\x0b\xee\xdf\xf7\x1d\x9a\x1d\x21\x6f\x0d\xf6\x62\x7e\xd7\x23\x7e\x3e\xf4\xf4\x11\x5f\x3d" +
	"\x82\xc0\xba\xef\xe7\xb7\x9e\x82\xf8\xdd\xe3\x41\xf6\xf3\xfc\xa9\x47\x21\x68\x78\x61\xcc\x27\xf0\x5e\x11\x1a\x0b" +
	"\x3c\x4c\x0c\xc3\x47\x9c\x83\xb6\x0b\xdf\xfb\x17\x4f\x31\x9d\x96\x9a\x53\x16\x1e\x7f\xee\x85\x33\xed\xf7\x4f\x0f" +
	"\xf6\x4f\x5f\xf9\xfb\xba\x67\xce\x3d\xaf\xbf\xc3\x3b\x37\x10\x68\x55\x40\x9e\xcd\x22\x49\xea\x81\x0b\x20\xb1\x43" +
	"\x59\x40\x89\xcb\x76\x35\x10\x2b\x81\xb2\xa4\xfd\x26\xe8\x87\x89\x62\xb0\x12\x79\xd1\xc3\xfd\x56\xce\xf8\x1a\xc7" +
	"\x92\x4b\xa9\x97\xe1\x49\xde\xb8\x80\x81\x50\x35\xd6\x7a\x50\x00\x40\xc7\xe3\xed\xde\x80\xc3\xfb\xe5\xfc\xfa\xf2" +
	"\xe6\xf2\xec\x97\xf7\xe7\x1f\xc7\xec\x65\xcb\x37\x6e\x82\xf3\xec\x9f\xaf\xe7\x1f\xce\xae\x6e\x3e\x9e\xfe\x7a\x36" +
	"\xde\xc3\x38\x47\x22\x3f\xb0\x9d\xfe\x75\x71\x73\x3a\x9f\x9f\x2d\x16\x37\x1f\xce\xbe\x8c\x37\x85\xc9\x70\xd8\xb4" +
	"\x38\x9b\x5f\x9e\x5d\x8d\x36\xf9\x77\xe6\x20\xc0\xca\xd2\x14\x50\xfc\x90\xe7\xf9\x40\x5b\x23\x73\xe3\xfa\x18\xfd" +
	"\xe7\x74\xee\x26\x74\x65\xd3\xab\x5d\x83\xe9\x79\x13\x46\x39\xf8\x9b\xd2\xa4\x44\x55\xfd\xbd\x57\x8e\x4c\xda\xf5" +
	"\x5e\x32\x86\xb1\x34\xa2\x43\x33\x56\x88\xca\xbd\xdd\xcb\xf8\x95\x6a\x4f\xf7\x9f\x9f\x3a\x26\x5d\x0d\xd3\x88\x6e" +
	"\xd7\x6e\x14\xd4\xb2\x2c\xe0\x18\x92\x24\x3e\x52\x5c\x99\x1e\x94\x2d\xfc\xe3\x9f\xfd\x71\x77\x73\x36\x58\x0d\xa6" +
	"\x55\xf1\x3b\x03\x70\x89\x4c\xa1\x01\xd7\xab\x03\x69\x1e\x28\x73\xe3\x2b\x09\x72\xf8\xad\xfb\xe3\x54\x9c\xf7\x43" +
	"\x6c\xff\x61\xe2\xe2\x13\x08\x25\xac\x60\x12\x48\x7c\xc5\x67\x1f\xb9\xa8\x2f\xcd\x93\x24\xbc\x0b\xfe\x1b\x4e\x04" +
	"\x4b\xff\x31\x1f\x82\x3a\xe7\x42\x32\x01\xf7\xb8\x6a\x9b\x58\x2e\x93\x87\x89\x65\xb7\x74\xea\x0b\xf7\x83\xab\xc9" +
	"\x9e\x14\x5e\x2c\xf7\x19\x74\xec\xbf\x17\xd2\x71\x31\x9d\xfe\x8e\x74\x8d\x69\x38\x17\x7f\xf0\x77\x63\xf2\xaf\x00" +
	"\x00\x00\xff\xff\xf2\x32\x10\x46\x44\x16\x00\x00")

func bindataCodefreshConfigyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshConfigyaml,
		"codefresh/config.yaml",
	)
}



func bindataCodefreshConfigyaml() (*asset, error) {
	bytes, err := bindataCodefreshConfigyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/config.yaml",
		size: 5700,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588108430, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"codefresh/certs/tls.md": bindataCodefreshCertsTlsmd,
	"codefresh/config.yaml":  bindataCodefreshConfigyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"codefresh": {Func: nil, Children: map[string]*bintree{
		"certs": {Func: nil, Children: map[string]*bintree{
			"tls.md": {Func: bindataCodefreshCertsTlsmd, Children: map[string]*bintree{}},
		}},
		"config.yaml": {Func: bindataCodefreshConfigyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
