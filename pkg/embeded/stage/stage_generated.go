// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md

package stage


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCodefreshAssetsAssetsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40" +
	"\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50" +
	"\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1" +
	"\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func bindataCodefreshAssetsAssetsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshAssetsAssetsmd,
		"codefresh/assets/assets.md",
	)
}



func bindataCodefreshAssetsAssetsmd() (*asset, error) {
	bytes, err := bindataCodefreshAssetsAssetsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/assets/assets.md",
		size: 88,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588116394, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshCertsTlsmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69" +
	"\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb" +
	"\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79" +
	"\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8" +
	"\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f" +
	"\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1" +
	"\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3" +
	"\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5" +
	"\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e" +
	"\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6" +
	"\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00" +
	"\x00")

func bindataCodefreshCertsTlsmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshCertsTlsmd,
		"codefresh/certs/tls.md",
	)
}



func bindataCodefreshCertsTlsmd() (*asset, error) {
	bytes, err := bindataCodefreshCertsTlsmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/certs/tls.md",
		size: 490,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588103933, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshConfigyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\x1b\xb9\xf1\x7f\xbf\x9f\x62\x10\xbd\xf8\xdf\xfd\xe1\x5d" +
	"\x49\x49\xee\x2e\x59\xf4\xc9\xa7\xf8\xee\x82\xe0\x62\xc3\xb2\xd3\x0b\x8a\xc2\xa0\xb8\xb3\x12\x2b\x2e\xb9\x26\xb9" +
	"\xb2\x95\xa2\xdf\xbd\x98\x21\x77\xb5\x72\x02\x34\x89\x8b\xbe\x69\x61\xc3\xe6\x92\xf3\xf0\xe3\xcc\x90\xfc\x91\xca" +
	"\xf8\x20\xb4\x46\x57\x66\x00\x0e\x35\x0a\x8f\x25\xcc\x8b\x59\xf1\xf2\x45\x06\x30\x81\xb0\x6f\xb1\x04\x6e\x02\x3c" +
	"\xb1\x2d\x3a\x11\xac\x7b\x02\x39\x88\xb6\xd5\x7b\x90\xb6\xc2\xda\xa1\xdf\x80\x74\x15\x54\x58\x2b\xa3\x82\xb2\xa6" +
	"\xd7\xd8\xa0\x6e\x48\x3a\x39\x9a\x76\xed\xda\x89\x0a\x81\xfa\x41\x6e\x84\x0b\x50\x3b\xdb\x80\xd4\x0a\x4d\xc8\x20" +
	"\x39\xec\x1d\x65\x30\x34\x09\x21\xc0\x44\x35\x62\x8d\xe5\xc1\xef\x54\xd6\xb9\x35\xad\xc3\x26\x1f\x24\xb5\x08\xe8" +
	"\x43\x94\x07\x8f\x6e\xa7\x24\x9e\x4a\x69\x3b\x13\xca\xbe\x77\xab\xda\x85\xab\xe8\x93\xa0\x94\x11\x2f\x03\xea\xa7" +
	"\xbb\x43\xe7\x95\x35\x69\xc8\x61\x6b\x4b\xc8\xb2\xca\xca\x6d\x0c\xd7\x00\xe1\x12\xd7\xca\x07\xb7\x5f\x8a\x12\xe2" +
	"\xf0\xd4\x8b\xe2\x6f\x3e\x45\xa1\xf3\x78\xe1\xd4\x4e\x04\xec\x05\x4b\xa8\x85\xf6\xc8\xa3\xed\x83\xa1\x14\x38\x51" +
	"\x55\x0e\xbd\xef\x3f\x3b\x8f\xce\x88\x06\xfb\xef\x56\x78\x7f\x67\x23\x7e\xfa\x96\xd6\xd4\x6a\xfd\x93\xd2\x2c\x91" +
	"\x65\x41\xb3\xaa\x47\x5d\x2f\xd5\xda\x60\x75\x70\x29\x91\xa6\x48\x7f\xfd\xd4\x7b\x5d\x48\x47\x91\xda\xe2\xbe\xef" +
	"\x4c\x88\x8a\x2d\xee\xb3\x6c\xdb\xad\xd0\x19\x0c\xc8\xf6\x08\x82\x6f\x85\x1c\x27\x80\x10\x90\xd4\xc2\x9a\x80\xf7" +
	"\x29\x7a\xa9\xa3\x56\xeb\x32\xcb\x26\x93\x09\xfc\x42\xf9\xde\x09\xdd\xa1\xcf\xd6\xda\xae\x84\x26\x7b\xa2\x6d\x2f" +
	"\x9c\x0d\x56\x5a\x5d\xc2\x26\x84\xd6\xb3\xf0\x62\x28\xaa\xd3\xb6\x85\xca\x36\x42\x19\xf6\x1d\x55\xae\x9d\xa6\x4c" +
	"\x4c\x60\x19\xac\x13\x6b\x04\xa9\x85\xf7\x50\x5b\x07\x42\x6b\x68\x29\x6f\x3e\xa0\x09\x7d\xee\x3d\x7c\x63\x8d\xde" +
	"\x83\x32\x20\x85\x47\xd8\xdb\xce\x81\x3f\x52\xf6\x5d\xdb\x5a\x17\x3c\x88\x2e\xd8\x46\x04\x25\x61\x67\x75\xd7\x20" +
	"\xb4\xce\xee\x14\x15\x82\x32\xeb\x6f\x0b\xf8\x71\x4f\x55\x2e\x3a\x1d\x46\x30\xef\x94\xd6\x94\x23\x08\x1b\x1c\x86" +
	"\x8f\x1d\xc4\x0c\x75\x0e\x2b\x82\xc1\x08\xa4\xee\x7c\x40\x77\x02\xaa\x66\xc5\x63\x85\xbd\xed\xe0\x4e\x98\x00\xc1" +
	"\xb2\x69\xe5\xcd\xff\xd1\x8c\x02\x08\x3f\xf8\xe8\x4d\x6d\x5f\xf8\xde\x1c\xb4\xbc\x8a\x13\x1c\xe5\x61\x27\x9c\x12" +
	"\x2b\x8d\x64\xa8\x42\x2f\x9d\x5a\x21\xa8\x90\x4d\xa0\xf7\xb8\x20\x87\x25\x34\xfb\x3c\x75\xe4\x0c\x81\x42\xfc\x2a" +
	"\x39\x32\xb6\xc2\x25\x6a\x94\xc1\x3a\x8e\x74\x0f\xb6\xb5\x95\x2f\xe0\xda\x63\xdd\xe9\x21\xc0\xb6\x06\x6d\xa5\xd0" +
	"\x29\x86\x7e\xe4\xeb\xc2\x56\x6f\x47\xb6\x4a\x1a\x02\x38\x94\x59\xa1\xec\x74\x63\x7d\xe0\x6a\xef\x95\x72\xea\xc9" +
	"\x67\xf3\x58\x4b\xbf\x5e\x5d\xc3\x3b\x2a\x25\x06\x12\x57\x1c\x47\x75\xd5\x29\x5d\xa1\x03\x61\x2a\x70\x9d\x31\xe8" +
	"\xc8\x7a\x13\xba\x12\xe6\xcf\x67\xb3\xa8\x7d\x66\x76\xca\x59\xd3\x50\x7d\xf4\xa1\xf1\xbc\x9b\x29\xac\x28\x46\x5c" +
	"\x43\xb6\x62\xd0\x68\x76\x09\xe1\x2f\x57\x57\x17\x37\x17\x97\xe7\xbf\xbd\x2f\xe1\x09\x95\x6a\x39\x9d\x36\xfb\xd6" +
	"\xd9\xfb\x7d\x11\x2b\xb4\x90\xb6\x29\x5f\xcc\x5e\xcc\x9e\x44\x0d\x12\xba\x61\x81\xcf\xd5\x20\x1f\xcb\x2f\x77\xe2" +
	"\xbf\xcc\xcb\xdb\xf3\xc1\xc5\xfc\xe9\x0f\xc5\xac\x98\x15\xf3\x13\x4e\x17\x45\xf9\x64\x94\x8a\x54\x65\x85\xdf\xc9" +
	"\x93\x62\x58\xf0\xfc\x39\x9f\xcd\x8a\xef\x9f\xb3\xea\xfc\xfb\x97\xc5\xd3\xef\x9e\x17\xe9\xff\x89\xac\xf3\x94\x08" +
	"\x6a\xca\x5a\xb4\x8a\x1a\xad\xd8\x53\xcc\x7d\xec\xec\xb8\x8f\xf7\xdb\xa6\xf3\xd8\x35\xc3\xa7\xcf\x1b\x61\xc4\x3a" +
	"\x69\xc7\x9a\xce\x79\x11\x56\xe8\xa2\xb6\x35\xbe\xd3\x87\x56\x9e\x8c\xc5\x0d\xe8\x48\xdd\x59\xd3\xb1\x0e\x6d\xf2" +
	"\x39\xed\xe1\xe3\xe1\x0d\xba\x06\x79\x58\x99\x35\x6d\xb7\x6c\xc3\x59\x3a\x10\xc7\xbd\x14\xd6\x7c\x25\xe4\x16\x4d" +
	"\x45\xfd\x14\xa2\x5c\x99\x80\x6b\x27\xe8\xb0\xa3\xbe\xc6\x9a\xb5\xad\x56\xd4\x34\x22\xce\xd2\xd8\x46\x59\x6e\xb5" +
	"\xaa\x45\xad\x0c\x8e\x9d\xb7\xd6\x07\x32\x7f\xcb\x33\x71\x62\xb5\x52\xa1\xb9\xe5\x36\x56\xca\xc7\x46\x3c\x14\xb8" +
	"\xcd\xf5\x9c\x5a\x41\x35\x98\xe3\xa1\x90\xc7\x76\x69\xc9\x20\x35\x82\xf0\x5b\x74\xf9\x21\x9f\x29\xff\xc6\x0e\xf5" +
	"\xf2\xbf\xfc\xff\x77\xe5\x9f\x37\x40\xbc\x6f\xad\xc7\x11\x73\xa3\x99\x38\x23\x34\xf4\xfe\x22\x25\x4b\xb3\xa7\xe3" +
	"\xbc\x1f\xb8\xb0\xc4\x1d\x9e\x3f\x7f\x46\x9d\xd1\xce\x81\xd3\x04\xd7\x61\xf4\xd0\x9f\x75\xca\xac\x01\xef\x93\x71" +
	"\x0e\x10\x54\x22\x88\x15\x1d\x11\xe9\x68\x26\x43\x29\x74\x97\xd6\x86\x6b\x8f\x8e\x0f\x22\xee\xcb\x45\xd5\x28\x93" +
	"\x13\xf9\x79\x20\x77\xd1\xf3\x1f\xd8\xe3\xed\x15\xbe\xbb\xbb\x7d\x27\x5e\xde\xbe\xba\xc5\xd5\xed\x20\x79\x7d\xf9" +
	"\xba\x84\xa4\x53\x4e\xa7\xde\x36\x48\x96\xca\xe6\x4a\xdd\xde\xe1\xa9\xaf\xee\xfe\x34\x38\xea\xeb\xcc\x6f\x84\xab" +
	"\xf2\xd9\x8c\x7e\x77\x1f\xd4\xed\xbc\x48\x06\x0a\x83\xa1\x7c\xfa\xc3\x6c\xfe\xc3\xf4\x8f\xde\xeb\xdf\xf3\x64\x7b" +
	"\x4f\xcb\xad\x6a\x09\xf9\xc2\x21\xd7\x43\x8a\x45\x3f\xfc\x0a\x5b\x6d\x7b\xd2\xc7\xec\xb3\x52\x3e\x1e\x3b\x15\x0f" +
	"\xf1\x59\x64\xeb\x43\x22\x62\xac\xfa\x10\x71\x4c\x7f\x52\x0e\x53\xe0\xa4\xc3\x90\xd5\xe9\x7b\xc9\x9f\xcc\x87\x26" +
	"\xb0\xe8\x7c\xb0\x0d\x08\x63\x6c\x60\x24\x91\x15\x2d\x46\xa9\xe6\x9c\x82\x43\x6f\x3b\x27\x89\x21\x88\x00\x76\x87" +
	"\xce\xa9\x6a\xa0\x2e\x3e\x9b\x8c\x4c\xf0\x01\x78\x7c\x40\x27\x33\x85\x8c\xc4\xc1\xac\x95\xb9\xcf\x0f\x8c\x90\xa0" +
	"\x5c\x7c\x8a\x85\xf5\x8b\x04\xd2\x12\x86\x7e\x11\xf8\x13\xa0\xaa\x0f\x27\x10\x17\xc2\xb7\x43\x0d\x31\x86\x6c\xc2" +
	"\x74\x48\x0a\x73\xe0\x51\x47\xe4\x25\x32\x81\xbd\x11\xcd\x43\xe2\xc6\xbc\x0d\xac\x83\xd6\x51\xa4\x44\xc0\x0a\xf0" +
	"\x5e\xf9\xa0\xcc\xfa\x62\x27\x23\xad\x9c\x1c\x75\xf9\x8d\xed\x74\x92\x82\x15\xd6\xd6\x21\x68\xd1\x19\xb9\x21\x53" +
	"\xc4\xd4\x94\xa1\xcb\x0c\x43\x63\xb2\x11\xc4\x16\x3d\x7b\xc0\x0a\x8d\x44\x8e\xe8\x11\xc0\x6c\x42\x7c\xb5\x45\xa9" +
	"\xea\x3d\x93\x29\xe2\xe6\x91\x4d\xa9\x1a\xb2\x09\x9c\xdd\x8b\xa6\xd5\x08\xf3\x93\xbe\x66\xe1\x4e\x85\xcd\x97\xcc" +
	"\x92\x12\xd5\xd7\x3b\x6f\xf5\xc7\xf4\x4e\x62\xbb\xc9\x5b\x6b\x75\x3e\x1f\x8f\x2e\xd5\x07\x2c\xe1\xc5\xcf\x8a\x21" +
	"\xf6\x30\x9e\x1e\x72\x73\xab\xc1\x9a\x71\xf8\xda\x9d\x64\x24\x63\x8a\x47\x22\x92\xa7\x37\x40\xcb\x26\x34\xaf\x83" +
	"\x95\x88\x69\x14\xe8\x12\x46\xdb\xa0\xcf\xf5\x8e\x05\xcc\xc7\xec\xf0\xf3\xe9\xe1\x30\xfd\x4f\x4c\xef\x61\x3c\xe2" +
	"\x1e\x76\x8c\x26\xe9\xd3\xd0\x31\x0e\xbe\x66\x7d\x36\x8c\xf1\xa4\xff\x35\x92\x4f\x01\x39\x58\x78\x2c\x96\xb8\xd4" +
	"\x3e\xc2\x31\xff\x3c\x1c\xe9\x84\x9d\x3d\x16\x05\x9f\x69\x5f\x1b\x0c\x56\x7e\x34\x82\x74\xc2\x7e\x35\x88\xa4\xff" +
	"\xe8\x7c\x30\x27\xf9\xea\x7c\xb0\xf6\xa3\x31\x1c\x78\xd7\xd7\x86\x63\x64\xe2\xb1\x68\x22\x0d\x8b\x2f\x50\x5c\x25" +
	"\x93\x09\x2c\x31\x40\xec\x67\x79\x1c\x5e\x3c\x0a\x78\x1d\x40\x79\x68\x84\xa9\x44\xb0\x6e\xcf\x0f\x3a\xac\x78\x20" +
	"\x05\x3b\x74\x7b\x8f\xb2\x73\xd8\xab\xb1\xd4\x27\xe6\xf9\xf1\x4c\x3f\x31\x57\x46\x10\x87\x1e\xce\xf3\x4b\x57\xc1" +
	"\xe1\x95\xe7\x38\xfb\xb3\xd9\xe7\x2e\x85\x68\xe1\x91\x31\x9f\xc0\x6b\xe3\xd1\x05\x90\x91\x31\x0c\xcc\xef\xe8\xd8" +
	"\x85\x6f\xf8\x7a\x59\x4e\xa7\x95\x95\xbe\x88\x37\x6d\xba\x4e\x4e\x7b\xf9\xe9\x91\xfc\xf4\x5b\xde\xaf\xfb\xc1\xfe" +
	"\x01\x28\xee\xe1\xfd\x73\x1a\xcc\x8a\x79\xea\xd2\x76\x18\x05\xd0\xb8\x43\x5d\x42\x85\xab\x6e\x3d\x74\xd6\x0a\x75" +
	"\xe5\x0f\x42\xd0\x93\x89\x72\xf0\x92\xc6\xd2\x0c\x0f\xa2\x52\xc8\x0d\x8e\x35\x57\xda\xae\xe2\xfb\x47\x4b\x01\x03" +
	"\x65\x1a\x6c\xec\x60\x00\xc0\x3f\x1b\x8b\xb3\x03\xc2\xfb\xfe\xfc\xfa\xf2\xe6\xf2\xec\xe7\xd7\xe7\x6f\xc7\xc3\xab" +
	"\x4e\x6e\x89\x78\xf1\xf0\x8f\xd7\x8b\x37\x67\x57\x37\x6f\x4f\x7f\x3d\x1b\xcb\x08\x29\xd1\x7b\x7e\x5b\x3b\xfd\xf3" +
	"\xf2\xe6\x74\xb1\x38\x5b\x2e\x6f\xde\x9c\xbd\x1f\x0b\x45\x42\x37\x08\x2d\xcf\x16\x97\x67\x57\x23\x21\xbe\xd4\x0f" +
	"\x0a\xa2\xaa\x5c\x09\xe5\x77\xb3\xd9\x6c\xe8\xdb\xa0\xa0\xbb\xd1\x18\xfd\x6f\x39\xbf\xc7\x99\x90\x5f\xed\x5b\xcc" +
	"\xcf\xdb\x48\xe5\xe0\x2f\xc6\x7a\xa3\xea\xfa\xaf\xbd\x71\x14\x3a\x6c\x0e\x9a\x29\x8c\x95\x53\x3b\x74\x63\x83\x68" +
	"\x88\xb1\x56\x89\xda\x1e\xfa\x99\xb3\xee\x84\xa6\x1a\xf6\xa3\xfe\xb0\x21\x2a\x68\x75\x55\xc2\x33\xc8\xb2\x74\x23" +
	"\xe4\x47\xc4\x71\xd9\xc2\xdf\xff\xd1\x2f\x77\xba\xd4\x40\xb0\xe0\x3a\x93\x1e\x75\x40\x6a\x14\x06\x1d\xd0\x59\x1d" +
	"\xbb\x16\xb1\x67\xe1\xb8\x92\x60\x06\xff\x4f\x3f\x64\xe2\xbc\x27\xb1\xfd\x2b\xd0\xc5\x3b\xe0\xc7\x68\xa1\xc1\xab" +
	"\x0f\xf8\xd5\x4b\x2e\xd9\xcb\x67\x59\x16\x2f\x61\xff\x89\x49\x44\x4f\xff\xb6\x39\x44\x73\x34\x85\x09\xd0\x45\xb6" +
	"\x6b\x53\xb5\x4c\x3e\xce\xab\xb8\xf3\xa7\x5c\xb7\x6f\xa8\x24\xfb\xae\x78\xcf\x78\x38\xe0\x9f\xf1\x63\xac\x7f\x56" +
	"\x4e\xa7\xbf\xa3\x1b\x56\x1e\x97\xc5\x1f\x78\x6b\xcc\xfe\x19\x00\x00\xff\xff\x22\x86\x50\xed\x5f\x18\x00\x00")

func bindataCodefreshConfigyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshConfigyaml,
		"codefresh/config.yaml",
	)
}



func bindataCodefreshConfigyaml() (*asset, error) {
	bytes, err := bindataCodefreshConfigyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/config.yaml",
		size: 6239,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588165535, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataCodefreshDockerDockermd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81" +
	"\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca" +
	"\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9" +
	"\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00" +
	"\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func bindataCodefreshDockerDockermdBytes() ([]byte, error) {
	return bindataRead(
		_bindataCodefreshDockerDockermd,
		"codefresh/docker/docker.md",
	)
}



func bindataCodefreshDockerDockermd() (*asset, error) {
	bytes, err := bindataCodefreshDockerDockermdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "codefresh/docker/docker.md",
		size: 134,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1588116509, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": bindataCodefreshAssetsAssetsmd,
	"codefresh/certs/tls.md":     bindataCodefreshCertsTlsmd,
	"codefresh/config.yaml":      bindataCodefreshConfigyaml,
	"codefresh/docker/docker.md": bindataCodefreshDockerDockermd,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"codefresh": {Func: nil, Children: map[string]*bintree{
		"assets": {Func: nil, Children: map[string]*bintree{
			"assets.md": {Func: bindataCodefreshAssetsAssetsmd, Children: map[string]*bintree{}},
		}},
		"certs": {Func: nil, Children: map[string]*bintree{
			"tls.md": {Func: bindataCodefreshCertsTlsmd, Children: map[string]*bintree{}},
		}},
		"config.yaml": {Func: bindataCodefreshConfigyaml, Children: map[string]*bintree{}},
		"docker": {Func: nil, Children: map[string]*bintree{
			"docker.md": {Func: bindataCodefreshDockerDockermd, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
