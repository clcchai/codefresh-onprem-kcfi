/*
Copyright 2020 The Codefresh Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
    "fmt"
    "os"
    "path"
    "path/filepath"
    "runtime"
    "strings"
	  "text/template"
		"io/ioutil"
		"github.com/pkg/errors"
		
		"github.com/codefresh-io/onprem-operator/pkg/helm-internal/ignore"
		"github.com/codefresh-io/onprem-operator/pkg/helm-internal/sympath"
)

/*
for usage in 
\\go:generate go run generate generate_template.go <folder name under templates>
reads all files in folder and appends them to template map 
*/

var (
	chartsGeneratorName = "charts/generate_charts.go"
	chartsPackageName = "codefresh_charts"
	outfileBaseName = "charts_generated.go"
)

var chartsMapTemplate = template.Must(template.New("").Parse(
`
// Code generated by {{.GeneratorName}} go generate; DO NOT EDIT.
package {{.PackageName}}

import (
	"helm.sh/helm/v3/pkg/chart/loader"
)

func ChartsMap() map[string][]*loader.BufferedFile {
  chartsMap := make(map[string][]*loader.BufferedFile)
	
	{{ range $dir, $chartFiles := .ChartsDirMap }}
	/********
	/*
    Chart directory {{ $dir }}
	*/
	{{ range $name, $data := $chartFiles }}
	fileName: := "{{ $name }}"` + "\n" +
	"fileData := `{{$data}}`" + "\n" + `
	bufferedFile = &loader.BufferedFile{Name: fileName, Data: []byte(fileData)}
	chartsMap["{{$dir}}"] = append(chartsMap["{{$dir}}"], bufferedFile)

	{{end}}
	{{end}}
	return chartsMap
}
`))

type StringFile struct {
	Name string
	Data string
} 

type chartsMapTemplateData struct {
	GeneratorName string
  PackageName string
	ChartsDirMap map[string][]StringFile
}

// LoadDir loads from a directory.
//
// This loads charts only from directories.
// by helm.sh/helm/v3/pkg/chart/loader/directory.go
func LoadDir(dir string) ([]StringFile, error) {
	topdir, err := filepath.Abs(dir)
	if err != nil {
		return nil, err
	}
	files := []StringFile{}

	rules := ignore.Empty()
	ifile := filepath.Join(topdir, ignore.HelmIgnore)
	if _, err := os.Stat(ifile); err == nil {
		r, err := ignore.ParseFile(ifile)
		if err != nil {
			return nil, err
		}
		rules = r
	}
	rules.AddDefaults()

	topdir += string(filepath.Separator)

	walk := func(name string, fi os.FileInfo, err error) error {
		n := strings.TrimPrefix(name, topdir)
		if n == "" {
			// No need to process top level. Avoid bug with helmignore .* matching
			// empty names. See issue 1779.
			return nil
		}

		// Normalize to / since it will also work on Windows
		n = filepath.ToSlash(n)

		if err != nil {
			return err
		}
		if fi.IsDir() {
			// Directory-based ignore rules should involve skipping the entire
			// contents of that directory.
			if rules.Ignore(n, fi) {
				return filepath.SkipDir
			}
			return nil
		}

		// If a .helmignore file matches, skip this file.
		if rules.Ignore(n, fi) {
			return nil
		}

		// Irregular files include devices, sockets, and other uses of files that
		// are not regular files. In Go they have a file mode type bit set.
		// See https://golang.org/pkg/os/#FileMode for examples.
		if !fi.Mode().IsRegular() {
			return fmt.Errorf("cannot load irregular file %s as it has file mode type bits set", name)
		}

		data, err := ioutil.ReadFile(name)
		if err != nil {
			return errors.Wrapf(err, "error reading %s", n)
		}

		files = append(files, StringFile{Name: n, Data: string(data)})
		return nil
	}
	if err = sympath.Walk(topdir, walk); err != nil {
		return nil, err
	}

	return files, nil
}

func main() {

	var currentFilePath string
	if strings.Contains(os.Args[0], "/go-build") {
		_, currentFilePath, _, _ = runtime.Caller(0)
	} else {
		currentFilePath = os.Args[0]
	}

	currentDir := filepath.Dir(currentFilePath)

	// Fill Tempalate Map
	chartsDirMap := make(map[string][]StringFile)
	filesInDir, err := ioutil.ReadDir(currentDir)
	if err != nil {
		if err != nil {
			fmt.Printf("generate_template ERROR: failed to read directory %s, %v \n", currentDir, err)
			os.Exit(1)
	  }
	}
	for _, f := range filesInDir {
		var dir string
		if f.IsDir() {
			dir = f.Name()
			chartsDirMap[filepath.Base(dir)], err = LoadDir(dir)
			if err != nil {
				fmt.Printf("generate_template ERROR: failed to load chart directory %s, %v \n", dir, err)
				os.Exit(1)
			}
	  }
	}

	if len(chartsDirMap) == 0 {
			fmt.Printf("No files in %s\n", currentDir)
	}

	outfileDir := path.Join(filepath.Dir(currentDir), "pkg", chartsPackageName)
	outfileName := path.Join(outfileDir, outfileBaseName)
	if _, err := os.Stat(outfileDir); os.IsNotExist(err) {
    os.MkdirAll(outfileDir, os.ModePerm)
  }	
	outfile, err := os.Create(outfileName)
	if err != nil {
			fmt.Printf("generate_template ERROR: cannot create out file %s, %v \n", outfileName, err)
			os.Exit(1)
	}
	defer outfile.Close()

	err = chartsMapTemplate.Execute(outfile, chartsMapTemplateData{
		GeneratorName: chartsGeneratorName,
		PackageName: chartsPackageName,
		ChartsDirMap: chartsDirMap,
	})
	if err != nil {
		fmt.Printf("generate_template ERROR: cannot generate template %v \n", err)
		os.Exit(1)
	}
}