// Code generated for package stage by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/images/images-list
// ../stage/codefresh/images/images.md
// ../stage/k8s-agent/config.yaml
package stage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _codefreshAssetsAssetsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func codefreshAssetsAssetsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshAssetsAssetsMd,
		"codefresh/assets/assets.md",
	)
}

func codefreshAssetsAssetsMd() (*asset, error) {
	bytes, err := codefreshAssetsAssetsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/assets/assets.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshCertsTlsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00\x00")

func codefreshCertsTlsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshCertsTlsMd,
		"codefresh/certs/tls.md",
	)
}

func codefreshCertsTlsMd() (*asset, error) {
	bytes, err := codefreshCertsTlsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/certs/tls.md", size: 490, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6f\x1b\xb9\x11\x7f\xdf\xbf\x62\x10\x3d\xf4\xae\xf0\xae\xa4\x24\x77\xc9\x2d\xfa\xe5\x53\xdc\xbb\x20\xb8\xd8\xb0\xec\xf4\x82\xa2\x30\x28\xee\x48\x62\xc5\x25\xd7\x24\x57\xb6\x52\xf4\x7f\x2f\x66\xc8\xfd\x90\x13\xa0\x49\x5c\xf4\xa5\x85\x0d\x88\x3b\xdf\x33\x1c\x92\x3f\xb2\xc6\x20\x2a\x11\x44\x99\x01\xec\x94\xa9\x4a\x90\xb6\xc2\xb5\x43\xbf\xcd\x00\x94\xf1\x41\x68\x8d\x8e\xd8\x00\x13\x08\x87\x06\x4b\x48\x1f\x00\x4f\x6c\x83\x4e\x04\xeb\x9e\x40\x0e\xa2\x69\xf4\x61\x50\x07\xe9\x2a\xa8\x70\xad\x8c\x0a\xca\x9a\x41\x67\x8b\xba\x26\xf9\x64\x7c\xda\x36\x1b\x27\x2a\x04\xa2\x83\xdc\x0a\x17\x60\xed\x6c\x0d\x52\x2b\x34\x81\xf5\xa2\xdb\xce\x19\x93\xba\x8f\x18\x19\xc0\xa4\xb2\x72\x87\xee\x12\x37\xca\x07\x77\x28\x61\x23\x5d\xa1\xec\xb4\x8f\x27\x47\x13\xd0\x35\x4e\x79\xec\x54\x54\x2d\x36\x38\xca\x78\x2a\xd7\xb9\x35\x8d\xc3\x3a\x3f\xf2\xd5\x89\x5e\x89\x4d\x4a\x1e\x60\xe2\xd1\xed\x95\xc4\x53\x29\x6d\x6b\xc2\x5b\x51\x63\x1f\x8a\xdf\xa9\x66\x71\xf9\x2a\x7e\x53\x5a\x1d\x87\xb3\x1b\x39\x2c\xc2\xe6\x43\x6f\xd0\x61\x63\xbb\xf1\x1e\x9d\x57\xd6\x94\x59\xb6\x6b\x57\xe8\x0c\x06\xf4\x64\xc4\x88\x1a\x7d\x23\x24\x1e\xcf\xd3\x44\x5a\x13\xf0\x3e\x70\x74\x13\x52\x91\xd6\xac\xd5\x26\xfa\xcd\x82\x66\x65\x8f\x7a\xbd\x54\x1b\x83\x55\x09\xc1\xb5\x54\x06\x89\x1c\x0f\xba\xe0\xa7\xde\xeb\x42\x3a\x2a\xf8\x0e\x0f\x1d\xb1\x71\x6a\x2f\x02\x16\x3b\x3c\x64\x19\x17\x81\x4d\xf5\xce\xbb\x7a\x2f\x45\x09\x5e\x14\x7f\xf7\x3c\xd3\x13\x68\x3d\x5e\x44\xd5\x61\x46\xd6\x42\x73\xed\x27\xd0\x3c\x60\x65\xb1\x35\x44\x55\x39\xf4\xbe\xfb\x6c\x3d\x3a\x93\xea\x4a\xdf\x8d\xf0\xfe\xce\xba\x8a\xbe\xb5\xf2\x81\x05\x73\x88\x51\x4d\xe3\x4f\x4e\x8c\x8c\x14\x26\x13\xf8\x99\x3a\x6a\x2f\x74\x8b\x3e\xdb\x68\xbb\x12\xba\x4c\x9c\x45\xdf\xa5\xa7\x4d\x03\x95\xad\x85\x32\x5c\xdc\x0c\xa8\x8f\xaf\x9d\xe6\x52\x8a\xa6\xb9\x70\x36\x58\x69\x75\x09\xdb\x10\x1a\x9f\x65\x13\x58\x06\xeb\xc4\x06\x41\x6a\xe1\x3d\xac\xad\x03\xa1\x35\x34\x34\x65\x3e\xa0\x09\x90\x5a\xc3\xc3\x37\xd6\xe8\x03\x28\x03\x52\x78\x84\x83\x6d\x1d\xf8\x23\x65\xdf\x36\x8d\x75\xc1\x83\x68\x83\xad\x45\x50\x12\xf6\x56\xb7\x35\x42\xe3\xec\x5e\x51\x0f\x28\xb3\xf9\xb6\x80\x1f\x0f\xb4\x96\x44\xab\xc3\x28\xf6\x3b\xa5\x35\x55\x09\xc2\x16\x7b\xf6\xb1\x83\xd8\x07\xad\xc3\x8a\xc2\xe0\x08\xa4\x6e\x7d\x40\x77\x02\x6a\xcd\x8a\xc7\x0a\x07\xdb\xc2\x9d\x30\x01\x82\x65\xd3\xca\x9b\xdf\x50\x46\x01\x84\xef\x7d\x74\xa6\x76\x2f\x7d\x67\x0e\x1a\x8d\x94\x64\x0c\x47\x79\xd8\x0b\xa7\xc4\x4a\x23\x19\xaa\xd0\x4b\xa7\x56\x08\x2a\x64\x13\xe8\x3c\x2e\xc8\x61\x09\xf5\x21\x4f\x84\x9c\x43\xa0\x12\xbf\x4a\x8e\x8c\xad\x70\x89\x1a\x65\xb0\x8e\x2b\xdd\x05\xdb\xd8\xca\x17\x70\xed\x71\xdd\xea\xbe\xc0\x76\x0d\xda\x4a\xa1\x53\x0d\xfd\xc8\xd7\x85\xad\xde\x8e\x6c\x95\xc4\x02\x18\x16\x17\x6d\x15\x5b\xeb\x03\xf7\x5b\xa7\x94\x13\x25\x9f\xcd\xb3\x8c\x7a\xe6\x97\xab\x6b\x78\x47\xcd\xc4\x81\xc4\xed\x86\xab\xba\x6a\x95\xae\xd0\x81\x30\x15\xb8\xd6\x18\x74\x64\xbd\x0e\x6d\x09\xf3\xe7\xb3\x59\xd4\x3e\x33\x7b\xe5\xac\xa9\xa9\x3f\xba\xd2\x78\xde\x33\x15\x56\x54\x23\xee\x21\x5b\x71\xd0\x68\xf6\x29\xc2\x9f\xaf\xae\x2e\x6e\x2e\x2e\xcf\x7f\x7d\x5f\xc2\x13\xea\xc0\x72\x3a\xad\x0f\x8d\xb3\xf7\x87\x22\xb6\x6d\x21\x6d\x5d\xbe\x9c\xbd\x9c\x3d\x89\x1a\x24\x74\xc3\x02\x9f\xab\x41\x3e\x96\x5f\xee\xc4\x7f\x99\x97\xb7\xe7\xbd\x8b\xf9\xd3\x17\xc5\xac\x98\x15\xf3\x13\x9e\x2e\xaa\xf2\xc9\x68\x2a\x52\x97\x15\x7e\x2f\x4f\x8a\x61\xaf\xa4\xcf\xf9\x6c\x56\x7c\xff\x9c\x55\xe7\xdf\xff\x50\x3c\xfd\xee\x79\x91\x7e\x4f\xe4\x3a\x4f\x13\x41\x43\xb9\x16\x8d\xa2\x41\x23\x0e\x54\x73\x1f\x89\x2d\xd3\x78\x1b\xae\x5b\x8f\x6d\xdd\x7f\xfa\xbc\x16\x46\x6c\x92\x76\xec\xe9\x9c\x17\x61\x85\x2e\x6a\x5b\xe3\x5b\x3d\x8c\xf2\x64\x2c\x6e\xbd\x47\xea\xce\x9a\x96\x75\x68\xf3\xcf\x69\x63\x1f\xb3\xb7\xe8\x6a\x64\xb6\x32\x1b\xda\xf0\xd8\x86\xb3\x74\xd0\x8e\xa9\x54\xd6\x7c\x25\xe4\x0e\x4d\x45\x74\x2a\x51\xae\x4c\xc0\x8d\x13\x74\xa4\x12\xad\xb6\x66\x63\xab\x15\x0d\x8d\x88\x59\x1a\x5b\x2b\xcb\xa3\x46\x35\xa8\x95\xc1\xb1\xf3\xc6\xfa\x40\xe6\x6f\x39\x13\x27\x56\x2b\x15\xea\x5b\x1e\x63\xa5\x7c\x1c\xc4\x6d\x99\xc7\xdc\xcf\x69\x14\x54\x8d\x39\x0e\x8d\x3c\xb6\x4b\x4b\x06\x69\x10\x84\xdf\xa1\xcb\x87\xf9\x4c\xf3\x6f\x6c\xdf\x2f\xff\x9f\xff\xff\xad\xf9\xe7\x0d\x10\xef\x1b\xeb\x71\x84\x0f\x29\x13\x67\x84\x86\xce\x5f\x84\x7d\x29\xfb\x8c\x11\x51\x64\x5c\x58\x42\x29\xcf\x9f\x3f\x23\x62\xb4\x33\xa0\x0a\x46\x32\xec\xa1\x3b\xeb\x94\xd9\x00\xde\x27\xe3\x5c\x20\x20\x88\xbb\xa2\x23\x22\x1d\xcd\x64\x28\x95\xee\xd2\xda\x70\xed\xd1\xf1\x41\xc4\xb4\x5c\x54\xb5\x32\x39\xc1\x8f\x07\x72\x17\x1d\x02\x81\x03\xde\x5e\xe1\xbb\xbb\xdb\x77\xe2\x87\xdb\x57\xb7\xb8\xba\xed\x25\xaf\x2f\x5f\x97\x90\x74\xca\xe9\xd4\xdb\x1a\xc9\x52\x59\x5f\xa9\xdb\x3b\x3c\xf5\xd5\xdd\x9f\x7a\x47\x5d\x9f\xf9\xad\x70\x55\x3e\x9b\xd1\xff\xfe\x83\xba\x9d\x17\xc9\x40\x61\x30\x94\x4f\x5f\xcc\xe6\x2f\xa6\x7f\xf4\x5e\xff\x3e\xc1\xb6\xe8\x69\xb9\x53\x0d\x45\xbe\x70\xc8\xfd\xd0\xa3\xba\xc8\x7e\x85\x8d\xb6\x1d\xec\x62\xf0\x5d\x29\x1f\x8f\x9d\x8a\x59\x7c\x16\xd9\xf5\x30\x11\xb1\x56\x5d\x89\xb8\xa6\x7f\x56\x0e\x53\xe1\xa4\xc3\x90\xad\xd3\xf7\x92\x3f\x4b\x20\x29\x58\xb4\x3e\xd8\x1a\x84\x31\x36\x70\x24\x11\x15\x2d\x46\x53\xcd\x73\x0a\x0e\xbd\x6d\x9d\x24\x84\x20\x02\xd8\x3d\x3a\xa7\xaa\x1e\xba\xf8\x6c\x32\x32\xc1\x07\xe0\xf1\x01\x9d\xcc\x14\x32\x02\x07\xb3\x51\xe6\x3e\x1f\x70\x30\x85\x72\xf1\x29\x14\xd6\x2d\x12\x48\x4b\x18\xba\x45\xe0\x4f\x80\xba\x3e\x9c\x40\x5c\x08\xdf\xf6\x3d\xc4\x31\x64\x13\x86\x43\x52\x98\x01\x47\x1d\x81\x97\x88\x04\x0e\x46\xd4\x0f\x81\x1b\xe3\x36\xb0\x0e\x1a\x47\x95\x12\x01\x2b\xc0\x7b\xe5\x83\x32\x9b\x8b\xbd\x8c\x58\x73\x72\x44\xf2\x5b\xdb\xea\x24\x05\x2b\x5c\x5b\x87\xa0\x45\x6b\xe4\x96\x4c\x11\x52\x53\x86\x2e\x4c\x1c\x1a\x83\x8d\x20\x76\xe8\xd9\x03\x56\x68\x24\x72\x45\x8f\x02\xcc\x26\x84\x57\x1b\x94\x6a\x7d\x60\x30\x45\x97\x80\x88\xa6\xd4\x1a\xb2\x09\x9c\xdd\x8b\xba\xd1\x08\xf3\x93\xae\x67\xe1\x4e\x85\xed\x97\x64\x49\x13\xd5\xf5\x3b\x6f\xf5\xc7\xf0\x4e\x62\xb3\xcd\x1b\x6b\x75\x3e\x1f\x73\x97\xea\x03\x96\xf0\xf2\x27\xc5\x21\x76\x61\x3c\x1d\xe6\xe6\x56\x83\x35\xe3\xf2\x35\x7b\xc9\x91\x8c\x21\x1e\x89\x48\x4e\xaf\x0f\x2d\x9b\x50\x5e\x83\x95\x18\xd3\xa8\xd0\x25\x8c\xb6\x41\x9f\xeb\x3d\x0b\x98\x8f\xd1\xe1\xe7\xc3\xc3\x3e\xfd\x4f\xa4\xf7\xb0\x1e\x71\x0f\x3b\x8e\x26\xe9\x13\xeb\x38\x0e\xbe\xf8\x7c\x76\x18\xe3\xa4\xff\x7d\x24\x9f\x0a\x64\xb0\xf0\xd8\x58\xe2\x52\xfb\x28\x8e\xf9\xe7\xc5\x91\x4e\xd8\xd9\x63\xa3\xe0\x33\xed\x6b\x8b\xc1\xca\x8f\x8e\x20\x9d\xb0\x5f\x1d\x44\xd2\x7f\xf4\x7c\x30\x26\xf9\xea\xf9\x60\xed\x47\xc7\x30\xe0\xae\xaf\x2d\xc7\xc8\xc4\x63\xa3\x89\x30\x8c\xb4\x52\x97\x4c\x26\xb0\xc4\x00\x91\xce\xf2\xd8\xbf\x39\x14\xf0\x3a\x80\xf2\x50\x0b\x53\x89\x60\xdd\x81\x5f\x56\x58\x71\x00\x05\x7b\x74\x07\x8f\xb2\x75\xd8\xa9\xb1\xd4\x27\xf2\xfc\x38\xd3\x4f\xe4\xca\x11\x44\xd6\xc3\x3c\xbf\x74\x15\x0c\xef\x2c\xc7\xb3\x3f\x9b\x7d\xee\x52\x88\x16\x1e\x59\xf3\x09\xbc\x36\x1e\x5d\x00\x19\x11\x43\x8f\xfc\x8e\x8e\x5d\xf8\x86\xaf\x97\xe5\x74\x5a\x59\xe9\x8b\x78\xd3\xa6\xeb\xe4\xb4\x93\x9f\x1e\xc9\x4f\xbf\xe5\xfd\xba\x63\x2e\xd2\xd3\x57\xdc\xc3\xbb\x97\x34\x98\x15\xf3\x44\xd2\xb6\xe7\x02\x68\xdc\xa3\x2e\xa1\xc2\x55\xbb\xe9\x89\x6b\x85\xba\xf2\x83\x10\x74\x60\xa2\xec\xbd\x24\x5e\xca\x70\x10\x95\x42\x6e\x71\xac\xb9\xd2\x76\x15\xdf\x3f\x1a\x2a\x18\x28\x53\x63\x6d\x7b\x03\x00\xfe\xd9\x58\x9c\x1d\x50\xbc\xef\xcf\xaf\x2f\x6f\x2e\xcf\x7e\x7a\x7d\xfe\x76\xcc\x5e\xb5\x72\x47\xc0\x8b\xd9\x3f\x5e\x2f\xde\x9c\x5d\xdd\xbc\x3d\xfd\xe5\x6c\x2c\x23\xa4\x44\xef\xf9\x15\xef\xf4\x2f\xcb\x9b\xd3\xc5\xe2\x6c\xb9\xbc\x79\x73\xf6\x7e\x2c\x14\x01\x5d\x2f\xb4\x3c\x5b\x5c\x9e\x5d\x8d\x84\xf8\x52\xdf\x2b\x88\xaa\x72\x25\x94\xdf\xcd\x66\xb3\x9e\xb6\x45\x41\x77\xa3\x71\xf4\xbf\xe6\x0b\xba\x0e\x99\x90\x5f\x1d\x1a\xcc\xcf\x9b\x08\xe5\xe0\xaf\xc6\x7a\xa3\xd6\xeb\xbf\x75\xc6\x51\xe8\xb0\x1d\x34\x53\x19\x2b\xa7\xf6\xe8\xc6\x06\xd1\x10\x62\xed\x1e\x2c\x07\x3a\x63\xd6\xbd\xd0\xd4\xc3\x7e\x44\x0f\x5b\x82\x82\x56\x57\x25\x3c\x83\x2c\x4b\x37\x42\x7e\x3a\x1d\xb7\x2d\xfc\xe3\x9f\xdd\x72\xa7\x4b\x0d\x04\x0b\xae\x35\xe9\x51\x07\xa4\x46\x61\xd0\x01\x9d\xd5\x91\xb4\x88\x94\x85\xe3\x4e\x82\x19\xfc\x96\xfe\xc8\xc4\x79\x07\x62\xbb\x57\xa0\x8b\x77\xc0\x4f\xde\x42\x83\x57\x1f\xf0\xab\x97\x5c\xb2\x97\xcf\xb2\x2c\x5e\xc2\xfe\x1b\x49\x44\x4f\xff\xb1\x1c\xa2\x39\x4a\x61\x02\x74\x91\x6d\x9b\xd4\x2d\x93\x8f\xe7\x55\xdc\xf9\x53\xee\xdb\x37\xd4\x92\x1d\x29\xde\x33\x1e\x32\xfc\x33\x7e\xa1\xf5\xcf\xca\xe9\xf4\x77\x74\xc3\xca\xe3\xb2\xf8\x43\x7c\xef\xfe\x57\x00\x00\x00\xff\xff\x1f\x77\x7f\x1c\xd5\x18\x00\x00")

func codefreshConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_codefreshConfigYaml,
		"codefresh/config.yaml",
	)
}

func codefreshConfigYaml() (*asset, error) {
	bytes, err := codefreshConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/config.yaml", size: 6357, mode: os.FileMode(420), modTime: time.Unix(1589385214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshImagesImagesList = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5d\x72\xea\x3c\x0c\x7d\xcf\x2a\x3a\xd3\x67\x9b\xfc\x00\x2d\x5e\xc6\xb7\x81\x6f\x9c\x44\x18\x0f\x8e\xe4\x2b\xcb\x99\xdb\xdd\xdf\xc9\xb4\x50\x0a\x29\x65\x9a\xb7\xc4\xe7\xe8\x58\x3e\x52\x14\x3f\x3f\x3f\xfd\x07\x01\x6c\x82\xa7\x4a\x97\x7a\xb7\x2b\x3a\xea\x61\xcf\x90\x0e\xab\x2e\x73\x30\xc1\x0a\x24\xb9\x5c\xdd\x2b\xce\x28\x7e\x00\xd5\x05\xb0\x08\x7c\xcb\x71\x80\xc0\x56\x40\x75\xc0\x92\x66\x34\x82\xbf\x5d\xb4\x0e\x50\x4c\x12\xdb\x06\x28\x5c\xc7\xda\xd3\xea\x8c\x2a\x40\x01\x8e\xec\x13\xac\xbe\xe4\x72\x7c\x4d\x6a\x20\xf4\x42\x6c\xd6\x7a\xab\x9b\x0b\xc5\x7d\x52\x14\xcf\xdb\xf7\xd4\x1d\x81\x4d\xf5\xaa\xcb\x9d\xea\x3d\xf6\x45\x47\x98\x72\x30\xd3\xc1\xcb\x02\xad\x24\x53\xea\x9d\x5e\x17\x0c\xce\x27\xe1\x37\x53\xeb\x6d\xd1\x7a\x41\x3b\xf8\xd5\x40\xe8\xa8\x6f\x4d\xa3\xb7\xba\x6a\x14\x97\x45\xa4\x24\x8e\x21\x99\x9d\xde\xea\xfa\x4c\x64\xdb\xb6\x5e\x86\x3f\xa6\xd1\x2f\xba\x56\x5c\x7d\x22\xd0\xfb\x64\x1a\x5d\xeb\x9d\xe2\xfa\x6a\x79\x3d\xd9\x3f\xc9\x5e\x6f\x38\x01\x4d\xd1\x1d\x2c\xcb\x90\x13\xe4\x61\x75\xf1\x6c\xc6\x52\x6f\x74\x7d\xf2\xcb\x11\xb9\x00\xff\x77\x84\x62\x3d\x02\xa7\x55\x0f\x7b\x9b\x83\xb4\xb6\x3b\x02\xf6\xa6\xd2\xcd\xe3\xde\x12\x46\x86\x41\x51\x9c\x8a\x49\x6c\x4a\x5d\xe9\x52\x4d\x76\x55\x65\xf9\xa8\x0c\x13\xe6\x64\x3e\xd5\xc6\x8f\x3e\x7b\x2c\xfc\x00\x3c\xc0\xef\xc3\x91\x06\x4f\xbf\x0f\xef\xf6\xaa\x65\xb2\x7d\x67\x93\x00\x2f\x91\xb1\xd1\x2f\x09\x97\x90\x54\xf2\x0e\x97\x68\xe4\x05\x19\x4c\x0d\x97\xd4\x60\xd1\xba\x25\x3e\x84\x3c\xf9\xa8\x22\xd3\xe8\x7b\xe0\xb9\xc2\x3c\x2a\x45\x28\xf0\x57\x16\xa7\x74\x80\x30\x28\x86\x48\x8b\x95\x8e\xb9\x05\xe5\x51\xc0\xb1\x15\x4f\xbf\x2f\x55\xf4\x11\x82\x47\xb8\x93\xd1\x83\x4a\xa7\x39\x0d\x38\x7a\x26\x1c\x00\x97\x1b\x26\x36\x1d\x81\xd5\x74\x5a\x46\x90\xd9\x6f\xf3\x62\x04\x03\x3a\x8f\x60\x2a\x5d\x95\x1b\x5d\xde\x02\xd7\xc1\x8d\x3a\x88\xc4\xaf\xbf\x9b\xf7\xc1\xad\x62\x4e\x87\xd9\xc4\xe7\xc9\x21\x3c\x4c\x6e\xb3\x0f\xfd\xcf\xec\xf3\x54\x55\x81\xdc\xbc\x87\x5f\xf8\xce\x8b\xea\x02\xe1\x7c\x09\xef\x1c\x71\xdc\xa8\x14\xab\xfb\x8c\x59\x54\xac\x3b\x33\xea\x7b\xbe\x8c\x2f\xf7\xd1\x6f\xf7\x3f\x59\x35\x56\xdb\x9f\x70\x95\xe2\x0f\xfe\x95\xd3\x9f\x6d\xfb\xad\x69\xe3\xf7\x7e\x8e\xbb\x2b\x75\x1a\x22\xa5\xa9\xcf\xea\x8d\x2e\x6f\x76\xee\x21\x06\x7a\xbb\x6c\xda\x14\xd5\xf5\x01\xaf\x39\x17\xf0\x74\x5b\x78\xbf\x38\xe8\x8d\x1a\xeb\x75\x71\xf9\xb5\x1e\x29\xd0\xe9\x8e\x51\xd8\x10\xa7\xb6\xfe\x78\xcd\x6d\x46\xc9\xa7\xb7\x7f\x01\x00\x00\xff\xff\x06\xb1\x0e\x98\x6c\x09\x00\x00")

func codefreshImagesImagesListBytes() ([]byte, error) {
	return bindataRead(
		_codefreshImagesImagesList,
		"codefresh/images/images-list",
	)
}

func codefreshImagesImagesList() (*asset, error) {
	bytes, err := codefreshImagesImagesListBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/images/images-list", size: 2412, mode: os.FileMode(420), modTime: time.Unix(1589391816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshImagesImagesMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xb1\x0d\xc2\x40\x0c\x05\xd0\xfe\xa6\xf8\xd2\xf5\x2c\x11\x1a\xc6\x38\x2e\x3f\x89\x21\xd8\xc8\xfe\x12\x62\x7b\x5a\x06\x78\xbd\x77\x5c\x63\x3e\x99\xb8\xbd\xc6\xce\xc2\x69\xa5\xd6\x96\x70\x8d\x29\x2c\xb1\x72\x4b\xd6\x01\x05\xe2\xae\x61\x8e\x1a\x97\x47\x85\xe3\x63\x3a\x30\x93\x2b\x5d\x36\xce\xc2\x16\xf9\x07\xe8\x62\xbe\xd3\x8a\x48\xee\x56\xca\x6f\xfb\x05\x00\x00\xff\xff\xe1\x2b\x0a\x6e\x6f\x00\x00\x00")

func codefreshImagesImagesMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshImagesImagesMd,
		"codefresh/images/images.md",
	)
}

func codefreshImagesImagesMd() (*asset, error) {
	bytes, err := codefreshImagesImagesMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/images/images.md", size: 111, mode: os.FileMode(420), modTime: time.Unix(1589375849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8sAgentConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x54\x4d\x8f\xdb\x36\x10\xbd\xf3\x57\x0c\xd6\x07\x5f\x62\x4b\x49\x8b\x20\xe1\x6d\xb1\x68\xd1\x45\x8b\xc5\x22\x1f\xe8\x99\x26\x9f\x24\xc2\x14\x29\x90\x23\x6f\xdc\x5f\x5f\x8c\x64\xd9\x46\xf6\xba\x97\x00\xbe\x08\x14\x67\xe6\xf1\xcd\xc7\x9b\x1e\x6c\x9c\x61\xa3\x15\xd1\xde\x47\xa7\x69\xff\xa9\x6c\x4c\x8b\xc8\x8a\xc8\xc7\xc2\x26\x04\x64\x31\x13\xf1\x71\x80\xa6\x0e\xa1\x9f\x7e\xe5\x30\x1b\x88\x6c\x67\x32\x5f\x07\xaf\x28\x63\x08\xde\x9a\x87\x34\x46\xa6\x38\xf6\x3b\x64\x4a\x0d\x0d\xc9\x15\xe2\x44\x3b\x50\xb1\x1d\xdc\x68\x02\x9c\xba\x76\xd6\xf4\x5e\xa9\xd5\x8a\x7c\x6f\x5a\x3c\x8f\x21\x3c\xa7\xe0\xed\x91\xd6\xf7\xe1\xc5\x1c\xcb\x9a\x7c\x33\xdb\xbe\x99\x96\x7c\xa1\x75\x30\x8c\xc2\xeb\x77\x84\x50\x40\x05\x2c\xf8\xeb\xc7\xe6\x29\xf1\x73\x46\x41\xe4\x35\x65\x34\x9a\x3a\xe6\x41\x57\xd5\x7e\xdc\x21\x47\x30\xca\xd6\xa7\xca\x25\x5b\xaa\xb1\x20\x6f\xda\xd1\x3b\x54\x13\x74\xa9\x56\x43\xc6\x66\x18\x43\xf0\xb1\xdd\xcc\x77\xea\x27\x46\x9a\x66\x46\x6a\xca\xd6\x61\x08\xe9\x48\x2f\x1d\x22\x0e\xc8\xc2\xa1\x49\xd9\xe2\x6c\x52\xcb\x41\x53\x63\x42\x81\x84\x9d\xf3\x98\x58\x77\x20\x36\xad\x54\x49\x8e\x93\x4d\x2d\x1e\x9a\x0a\x9b\x5d\xb8\x44\x51\x34\x3d\xde\x11\x9b\x3d\x0a\x35\x39\xf5\x74\x30\xd9\x4f\x2e\x93\x5d\x13\xdd\xd9\xe4\xd0\x64\x94\xae\x9a\xba\x72\x27\xc1\x88\x87\xe9\xb5\xd4\x10\x0e\x31\xfb\x14\x7b\x44\x9e\x83\xc3\x0e\xa7\xde\x18\xe7\xe4\x24\x3c\x6c\x8a\x6c\x7c\x44\x2e\x6a\x85\x78\xd0\x02\x62\xc3\x58\x18\xf9\x7b\x0e\xb4\xa1\x34\xb0\x4f\xd1\x84\xad\x24\x2c\xd8\xe3\x40\x69\xe4\xe2\x1d\x16\xc7\xa9\x2c\x64\xc7\x9c\xe5\x2d\x41\xc4\x0f\x96\xe6\x8d\x05\xee\x82\xf7\x2d\xed\x11\xdf\x14\xf1\xe1\xfe\x6d\xe0\xcc\xe0\x17\x72\xa5\x4b\x63\x70\xd3\x00\x83\xe7\xb8\xa9\x4c\x22\x01\x89\x38\xa9\xc6\xc7\xf6\x42\xe3\xd1\xd1\xe6\xfc\x94\x34\x8e\x4c\x21\xcf\x94\xd1\x7a\xb9\x83\x23\x1f\xc9\x58\x2b\x02\x50\x2b\x79\xf5\x61\xe6\xf2\x70\xa2\xb2\x91\xbb\xd7\x04\x63\x61\x18\x27\xcd\x5c\xd0\xad\x8c\x59\x64\x6f\x42\xd9\xd2\x9f\x32\x68\xb4\x3b\x92\x43\x63\xc6\xc0\x5b\x65\x06\xff\x3d\x87\x59\x0b\x45\x57\x55\xbb\x3d\x0f\x89\xa8\xc1\x0c\xbe\x12\x15\xf7\x29\x7a\x4e\xb9\xc2\x01\x91\x8b\x3a\xa7\xa1\x97\x77\x9e\x4c\x0f\x75\x19\x03\x4d\x77\x77\xca\x06\x98\x78\x35\xdd\x43\xca\x7c\x19\x9f\xe9\x57\xc9\x47\xd3\xe7\xfa\x43\x2d\x1e\x05\xf9\xe0\x2d\x9e\xc5\x71\xf2\x3e\xcd\xfe\x45\xa2\x8b\x0b\x05\x29\x54\x24\x4e\xea\x2a\x48\xd3\xa7\x5a\xa9\x53\xdd\x84\x9d\x08\x59\x2d\xcd\x9a\x48\xa9\xbc\x33\xf6\x8f\x28\xc2\x70\x9a\x38\x8f\x50\x2a\xe2\xe5\x0b\x82\xb7\xff\x78\x8b\x58\xf0\x37\x8e\xb3\x6b\x07\x33\x7c\xf5\xff\x41\xd3\xef\xf5\xe7\x8f\x4a\x49\xa7\xca\x60\x2c\x1e\x23\x23\x1f\x4c\xd0\xf4\xb1\xae\xeb\x5a\x0d\xc9\x5d\xae\xde\x7f\x98\xee\x66\x71\x8b\x98\x5e\x99\x32\x02\x4c\xf9\x19\xa5\x5e\x32\x79\xe5\x5f\x60\x33\x5e\xc3\x28\xe7\x8b\xe4\xf1\x97\x6c\xde\xa5\xcc\xb2\x86\x7f\x5b\xfe\x64\x6e\x52\x6c\x7c\x7b\x75\xf1\xb4\x24\xf1\xaf\x77\xf8\x92\x02\x16\x1b\x7e\xf8\xc2\x3e\xb6\x5f\x67\x16\xf7\x73\x15\xa5\x12\xb7\xed\x7d\xdb\xde\xb7\xed\x7d\xdb\xde\xb7\xed\xfd\x2b\x6e\xef\xff\x03\x00\x00\xff\xff\x14\x80\x8a\x4d\xd5\x0b\x00\x00")

func k8sAgentConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sAgentConfigYaml,
		"k8s-agent/config.yaml",
	)
}

func k8sAgentConfigYaml() (*asset, error) {
	bytes, err := k8sAgentConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-agent/config.yaml", size: 3029, mode: os.FileMode(420), modTime: time.Unix(1589396696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md":   codefreshAssetsAssetsMd,
	"codefresh/certs/tls.md":       codefreshCertsTlsMd,
	"codefresh/config.yaml":        codefreshConfigYaml,
	"codefresh/images/images-list": codefreshImagesImagesList,
	"codefresh/images/images.md":   codefreshImagesImagesMd,
	"k8s-agent/config.yaml":        k8sAgentConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"codefresh": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"assets.md": &bintree{codefreshAssetsAssetsMd, map[string]*bintree{}},
		}},
		"certs": &bintree{nil, map[string]*bintree{
			"tls.md": &bintree{codefreshCertsTlsMd, map[string]*bintree{}},
		}},
		"config.yaml": &bintree{codefreshConfigYaml, map[string]*bintree{}},
		"images": &bintree{nil, map[string]*bintree{
			"images-list": &bintree{codefreshImagesImagesList, map[string]*bintree{}},
			"images.md":   &bintree{codefreshImagesImagesMd, map[string]*bintree{}},
		}},
	}},
	"k8s-agent": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{k8sAgentConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
