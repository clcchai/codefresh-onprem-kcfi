// Code generated for package stage by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../stage/codefresh/assets/assets.md
// ../stage/codefresh/certs/tls.md
// ../stage/codefresh/config.yaml
// ../stage/codefresh/docker/docker.md
// ../stage/k8s-agent/config.yaml
package stage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _codefreshAssetsAssetsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\x02\x20\x10\x05\xd0\xbd\xa7\xf8\xe0\x49\x22\x87\x8a\x40\x21\xbc\x80\xe1\x17\x05\x53\x98\xb1\xfb\x47\xfb\xe7\xbd\xc7\x4d\xa2\xbc\x2e\x59\x02\x9e\xdf\x37\x75\xf1\xd0\x50\x56\xc5\x9d\xf3\x83\x62\xc6\x63\x68\x5b\x71\xdd\x95\x4d\x69\xdd\xb9\x90\x10\x53\x86\x84\x47\x46\x1b\x93\x86\xb1\x70\xfa\xf8\xc3\x59\xa9\xbf\x00\x00\x00\xff\xff\xd6\xa5\xce\x4f\x58\x00\x00\x00")

func codefreshAssetsAssetsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshAssetsAssetsMd,
		"codefresh/assets/assets.md",
	)
}

func codefreshAssetsAssetsMd() (*asset, error) {
	bytes, err := codefreshAssetsAssetsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/assets/assets.md", size: 88, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshCertsTlsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\x3d\x8f\x1a\x31\x10\xed\xfd\x2b\x9e\xd8\x26\x69\x36\x3d\x0a\x69\x68\xa3\xa4\x40\xa7\x6b\x31\xde\xf1\xee\x88\xc1\x5e\x79\x66\xe1\xf6\xdf\x9f\x6c\x38\x28\xae\xb1\xc6\x7e\xd6\xfb\x9a\xae\xeb\xf0\x4e\x27\x1c\x0e\x7f\xb1\xa7\x62\x1c\x39\x78\x23\x45\xcc\x05\xfb\x3c\x50\x2c\xa4\x13\x38\xa9\x79\x11\x2a\xee\x39\x21\xe4\x14\x79\x5c\x0a\x29\x38\x8d\x85\x54\x61\xa2\x98\xbd\xf9\x0b\x19\x15\x85\x0f\x21\x97\xc8\x69\x84\x65\x60\x63\xa2\x1b\x9c\x69\x05\x27\x5c\xbd\x2c\xa4\xfd\xea\x2f\xe2\xdc\xf1\x78\x6c\x43\x87\x81\xa2\x5f\xc4\x1e\xb0\x33\xd1\xad\x03\x94\x24\x1e\x78\x4c\x34\x6c\x11\xbd\x28\x39\x20\x50\xb1\x6d\x3b\xf5\x97\xaa\xf4\xa1\x98\x43\x65\xff\x7a\x9c\x0b\x5f\xbd\x51\x7f\xa6\xb5\x0a\x38\xc7\x11\xf5\xe3\x8b\x6c\xd7\xb8\xf0\xe3\x21\xfa\xf3\x95\xb2\xea\xf3\xd0\x7a\xf0\x69\xc0\xa2\xa4\x0f\x4b\xc8\x77\x96\xaa\xd1\xb0\x7a\x39\xd3\xda\xbb\x7b\x7b\xbe\xd5\xd7\x90\x9a\x34\xb2\x90\x42\xa7\xbc\xc8\x00\xfa\x60\xb5\x1a\xde\x26\x82\xce\x14\x38\x32\x0d\x90\x1c\xbc\x71\x4e\xbd\xfb\x6f\x13\x95\x1b\x2b\xe1\xbb\x57\x2b\x0b\x81\x0d\x23\x25\x2a\xcd\x59\x05\xb5\x81\x2d\xf1\x73\x73\x37\xb6\x09\xfb\x7f\xbb\xdf\xa3\xe4\x93\x97\xde\xcf\xf3\x5b\x91\x3f\x9f\x01\x00\x00\xff\xff\xee\xcd\x17\x47\xea\x01\x00\x00")

func codefreshCertsTlsMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshCertsTlsMd,
		"codefresh/certs/tls.md",
	)
}

func codefreshCertsTlsMd() (*asset, error) {
	bytes, err := codefreshCertsTlsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/certs/tls.md", size: 490, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\x1b\xb9\xf1\x7f\xbf\x9f\x62\x10\xbd\xf8\xdf\xfd\xe1\x5d\x49\x49\xee\x2e\x59\xf4\xc9\xa7\xf8\xee\x82\xe0\x62\xc3\xb2\xd3\x0b\x8a\xc2\xa0\xb8\xb3\x12\x2b\x2e\xb9\x26\xb9\xb2\x95\xa2\xdf\xbd\x98\x21\x77\xb5\x72\x02\x34\x89\x8b\xbe\x69\x61\x03\x22\xe7\x79\x86\x43\xf2\xc7\x6d\x30\x88\x4a\x04\x51\x66\x00\x5b\x65\xaa\x12\xa4\xad\xb0\x76\xe8\x37\x19\x80\x32\x3e\x08\xad\xd1\x11\x1b\xc0\xa1\x46\xe1\xb1\x84\x79\x31\x2b\x5e\xbe\x60\xda\x04\xc2\xbe\xc5\x12\xd2\x04\xe0\x89\x6d\xd1\x89\x60\xdd\x13\xc8\x41\xb4\xad\xde\x1f\x4c\x82\x74\x15\x54\x58\x2b\xa3\x82\xb2\xe6\xa0\xb3\x41\xdd\x90\x7c\x72\x38\xed\xda\xb5\x13\x15\x02\xd1\x41\x6e\x84\x0b\x50\x3b\xdb\x80\xd4\x0a\x4d\x60\xbd\xe8\xb6\x77\xc6\xa4\x7e\x12\xa3\x05\x98\xa8\x46\xac\x71\x94\xd2\x54\xd6\xb9\x35\xad\xc3\x26\x1f\x64\xb5\x08\xe8\x43\xaf\xe1\xd1\xed\x94\xc4\x53\x29\x6d\x67\xc2\x5b\xd1\xe0\x60\xcc\x6f\x55\xbb\xb8\x7c\x15\xe7\x14\x58\xcf\xe1\xf8\x46\x5e\x8a\xb0\xfe\x00\xbd\x96\xc3\xd6\xf6\xe3\x1d\x3a\xaf\xac\x29\xb3\x0c\x60\x32\x99\xc0\x2f\x94\xdd\x4e\xe8\x0e\x7d\xb6\xd6\x76\x25\x74\x99\x38\x8b\xa1\x62\xa7\x6d\x0b\x95\x6d\x84\x32\x60\x44\x83\x19\x50\x4d\xaf\x9d\xe6\x8a\x8b\xb6\xbd\x70\x36\x58\x69\x75\x09\x9b\x10\x5a\x9f\x65\x13\x58\x06\xeb\xc4\x1a\x41\x6a\xe1\x3d\xd4\xd6\x81\xd0\x1a\x5a\x72\xee\x03\x9a\x00\x29\x49\x0f\xdf\x58\xa3\xf7\xa0\x0c\x48\xe1\x11\xf6\xb6\x73\xe0\x8f\x94\x7d\xd7\xb6\xd6\x05\x0f\xa2\x0b\xb6\x11\x41\x49\xd8\x59\xdd\x35\x08\xad\xb3\x3b\x45\xd9\x28\xb3\xfe\xb6\x80\x1f\xf7\xb4\xae\xa2\xd3\x61\x14\xfb\x9d\xd2\x1a\x3a\x8f\x10\x36\x38\xb0\x8f\x1d\x48\x6b\x6a\xb5\xee\x1c\x56\x14\x06\x47\x20\x75\xe7\x03\xba\x13\x50\x35\x2b\x1e\x2b\xec\x6d\x07\x77\xc2\x04\x08\x96\x4d\x2b\x6f\xfe\x8f\x32\x0a\x20\xfc\xe0\xa3\x37\xb5\x7d\xe1\x7b\x73\xd0\x72\xef\xa6\x70\x94\x87\x9d\x70\x4a\xac\x34\x92\xa1\x0a\xbd\x74\x6a\x85\xa0\x42\x36\x81\xde\xe3\x82\x1c\x96\xd0\xec\xf3\x44\xc8\x39\x04\x2a\xf1\xab\xe4\xc8\xd8\x0a\x97\xa8\x51\x06\xeb\xb8\xd2\x7d\xb0\xad\xad\x7c\x01\xd7\x1e\xeb\x4e\x0f\x05\xb6\x35\x68\x2b\x85\x4e\x35\xf4\x23\x5f\x17\xb6\x7a\x3b\xb2\x55\x12\x0b\x60\xdb\xad\xd0\x19\x0c\xe8\x0b\x65\xa7\x1b\xeb\x03\xf5\x40\xd9\x2b\xe5\x44\xc9\x67\xf3\x2c\xa3\x9e\xf9\xf5\xea\x1a\xde\x51\x33\x71\x20\x95\x95\x5b\x74\x5c\xd5\x55\xa7\x74\x85\x0e\x84\xa9\xc0\x75\xc6\xa0\x23\xeb\x4d\xe8\x4a\x98\x3f\x9f\xcd\xa2\xf6\x99\xd9\x29\x67\x4d\x43\xfd\xd1\x97\xc6\xf3\xfe\x55\x58\x51\x8d\xb8\x87\x6c\xc5\x41\xa3\xd9\xa5\x08\x7f\xb9\xba\xba\xb8\xb9\xb8\x3c\xff\xed\x7d\x09\x4f\xa8\x03\xcb\xe9\xb4\xd9\xb7\xce\xde\xef\x8b\xd8\xb6\x85\xb4\x4d\xf9\x62\xf6\x62\xf6\x24\x6a\x90\xd0\x0d\x0b\x7c\xae\x06\xf9\x58\x7e\xb9\x13\xff\x65\x5e\xde\x9e\x0f\x2e\xe6\x4f\x7f\x28\x66\xc5\xac\x98\x9f\xf0\x72\x51\x95\x4f\x46\x4b\x91\xba\xac\xf0\x3b\x79\x52\x1c\x76\x3d\x4d\xe7\xb3\x59\xf1\xfd\x73\x56\x9d\x7f\xff\xb2\x78\xfa\xdd\xf3\x22\xfd\x9e\xc8\x3a\x4f\x0b\x41\x43\x59\x8b\x56\xd1\xa0\x15\x7b\xaa\xb9\x8f\xc4\x8e\x69\x7c\xa0\x34\x9d\xc7\xae\x19\xa6\x3e\x6f\x84\x11\xeb\xa4\x1d\x7b\x3a\xe7\x4d\x58\xa1\x8b\xda\xd6\xf8\x4e\x1f\x46\x79\x32\x66\x4d\xc0\xfb\x70\xa4\xee\xac\xe9\x58\x87\x8e\xb1\x9c\x8e\xa8\x31\x7b\x83\xae\x41\x66\x2b\xb3\x76\xe8\x3d\xdb\x70\x96\x2e\x82\x31\x95\xca\x9a\xaf\x84\xdc\xa2\xa9\x88\x4e\x25\xca\x95\x09\xb8\x76\x82\x8e\x77\xa2\x35\xd6\xac\x6d\xb5\xa2\xa1\x11\x31\x4b\x63\x1b\x65\x79\xd4\xaa\x16\xb5\x32\x38\x76\xde\x5a\x1f\xc8\xfc\x2d\x67\xe2\xc4\x6a\xa5\x42\x73\xcb\x63\xac\x94\x8f\x83\xb5\xf2\xc1\xed\x79\xcc\xfd\x9c\x46\x41\x35\x98\xe3\xa1\x91\xc7\x76\x69\xcb\x20\x0d\x82\xf0\x5b\x74\xf9\x61\x3d\xd3\xfa\x1b\x3b\xf4\xcb\xff\xd6\xff\xbf\x6b\xfd\xf9\x00\xc4\xfb\xd6\x7a\x1c\x61\x15\xca\xc4\x19\xa1\xa1\xf7\x17\x21\x48\xca\x3e\xe3\xbb\x3d\x32\x2e\x2c\xdd\xff\xcf\x9f\x3f\x23\x62\xb4\x73\x99\x58\x25\x04\xd7\x61\xf4\xd0\xdf\x75\xca\xac\x01\xef\x93\x71\x2e\x10\x10\x04\x5b\xd1\x15\x91\xae\x66\x32\x94\x4a\x77\x69\x6d\xb8\xf6\xe8\xf8\x22\x62\x5a\x2e\xaa\x46\x99\xbc\xf3\xe8\x1e\xc8\x5d\x08\xef\xef\xac\xab\x4a\xd8\xe3\xed\x15\xbe\xbb\xbb\x7d\x27\x5e\xde\xbe\xba\xc5\xd5\xed\x20\x79\x7d\xf9\xba\x84\xa4\x53\x4e\xa7\xde\x36\x48\x96\xca\xe6\x4a\xdd\xde\xe1\xa9\xaf\xee\xfe\x34\x38\xea\xfb\xcc\x6f\x84\xab\xf2\xd9\x8c\xfe\x77\x1f\xd4\xed\xbc\x48\x06\x0a\x83\xa1\x7c\xfa\xc3\x6c\xfe\xc3\xf4\x8f\xde\xeb\xdf\x73\xb2\xbd\xa7\xe5\x56\xb5\x14\xf9\xc2\x21\xf7\x43\xaa\x45\xcf\x7e\x85\xad\xb6\xfb\x12\x6a\xa1\x3d\x32\x10\xac\x94\x8f\xd7\x4e\xc5\x2c\xbe\x8b\x6c\x7d\x58\x88\x58\xab\xbe\x44\xd9\x61\x09\x09\x36\xd1\xcd\xe8\x5b\x21\xf1\x18\xc2\x4e\x48\x6a\x11\xf7\x00\x63\xa6\x9e\x50\xab\x75\x04\x70\x59\xd0\x6c\xc0\xa3\xae\x97\x6a\x6d\xb0\x1a\x02\x95\xc8\xc0\x0e\x5d\xf0\x53\xef\x75\x21\x1d\x01\xc5\x2d\xee\x7b\x62\xeb\xd4\x4e\x04\x2c\xb6\xb8\xcf\xb2\x78\xe5\x92\xa9\x21\x80\xbe\x0d\x96\xa2\x04\x2f\x8a\xbf\x79\x06\xbd\x13\x42\x21\x17\x51\xf5\xd0\x28\x5c\x07\xe6\xb6\x0f\x58\x59\x44\xc9\xa2\xaa\xa8\xf3\xfa\x29\xad\x9a\x49\x00\x95\xe6\x6d\xbf\xf8\x69\x1e\xdb\xed\x27\xa5\x59\x82\x3b\xf0\x27\xe5\x30\xb5\x99\x74\x18\xb2\x3a\xcd\x97\x3c\x2d\x81\xfa\x14\x16\x9d\x0f\xb6\x01\x61\x8c\x0d\xbc\x6e\x11\x43\x2e\x46\x1b\x83\x77\x00\x38\xf4\xb6\x73\x92\xf0\x94\x08\x60\x77\xe8\x9c\xaa\x06\xa0\xe7\xb3\xc9\xc8\x04\xc3\x85\x63\x38\x93\xcc\x14\x32\xc2\x2c\xb3\x56\xe6\x3e\x3f\x2c\x1d\x85\x72\xf1\x29\xcc\xda\x1f\x29\x90\x0e\x3c\xe8\x8f\x0c\x7f\x02\x74\x46\x84\x13\x88\xc7\xc6\xb7\xc3\x8e\xe3\x18\xb2\x09\x83\x47\x29\xcc\x01\x75\x1e\x41\xbd\x88\x9b\xf6\x46\x34\x0f\x61\x2e\xa3\x5c\xb0\x0e\x5a\x47\x95\x12\x01\x2b\xc0\x7b\xe5\x83\x32\xeb\x8b\x9d\x8c\xc8\x7c\x72\x44\xf2\x1b\xdb\xe9\x24\x05\x2b\xac\xad\x43\xd0\xa2\x33\x72\x43\xa6\x08\xd7\x2a\x43\x4f\x1d\x0e\x8d\xa1\x59\x10\x5b\xf4\xec\x01\x2b\x34\x12\xb9\xa2\x47\x01\x66\x13\x42\xf7\x2d\x4a\x55\xef\x19\x7a\x52\xcf\x46\xec\xa9\x6a\xc8\x26\x70\x76\x2f\x9a\x56\x23\xcc\x4f\xfa\x1d\x0e\x77\x2a\x6c\xbe\x24\x4b\x5a\xa8\xfe\x74\xe0\x8b\xf1\x18\x0c\x4b\x6c\x37\x79\x6b\xad\xce\xe7\x63\xee\x52\x7d\xc0\x12\x5e\xfc\xac\x38\xc4\x3e\x8c\xa7\x87\xb5\xb9\xd5\x60\xcd\xb8\x7c\xed\x4e\x72\x24\x63\x40\x4c\x22\x92\xd3\x1b\x42\xcb\x26\x94\xd7\xc1\x4a\x8c\x69\x54\xe8\x12\x46\x97\x86\xcf\xf5\x8e\x05\xcc\xc7\x58\xfa\xf3\xc1\xf4\x90\xfe\x27\xd2\x7b\x58\x8f\x78\xe2\x1f\x47\x93\xf4\x89\x75\x1c\x07\xef\xcb\xcf\x0e\x63\x9c\xf4\xbf\x8e\xe4\x53\x81\x1c\x2c\x3c\x36\x96\xb8\xd5\x3e\x8a\x63\xfe\x79\x71\x24\x3c\x32\x7b\x6c\x14\x8c\x00\xbe\xb6\x18\xac\xfc\xe8\x08\x12\x1e\xf9\xea\x20\x92\xfe\xa3\xd7\x83\x11\xdc\x57\xaf\x07\x6b\x3f\x3a\x86\x03\x4a\xfd\xda\x72\x8c\x4c\x3c\x36\x9a\x08\x5a\x49\x2b\x75\xc9\x64\x02\x4b\x0c\x10\xe9\x2c\x8f\xc3\x15\x59\xc0\xeb\x00\xca\x43\x23\x4c\x25\x82\x75\xfb\xf4\x79\xab\x52\xfe\x00\xa1\x76\xe8\xf6\x1e\x65\xe7\xb0\x57\x63\xa9\x4f\xe4\xf9\x71\xa6\x9f\xc8\x95\x23\x88\xac\x87\x79\x7e\xe9\x2e\x38\xc0\x82\xe3\xd5\x9f\xcd\x3e\x77\x2b\x44\x0b\x8f\xac\xf9\x04\x5e\x1b\x8f\x2e\x80\x8c\x88\x61\xc0\xc9\x47\xd7\x2e\x7c\xc3\x8f\xf1\x72\x3a\xad\xac\xf4\x45\x04\x49\xf4\xf8\x9e\xf6\xf2\xd3\x23\xf9\xe9\xb7\x7c\x5e\xf7\xcc\x1e\xa9\xc5\x33\xbc\xff\x82\x06\xb3\x62\x9e\x48\xda\x0e\x5c\x00\x8d\x3b\xd4\x25\x54\xb8\xea\xd6\x03\xb1\x56\xa8\x2b\x7f\x10\x82\x1e\x4c\x94\x83\x97\xc4\x4b\x19\x1e\x44\xa5\x90\x1b\x1c\x6b\xae\xb4\x5d\xc5\xaf\x45\x2d\x15\x0c\x94\x69\xb0\xb1\x83\x01\x00\xff\x6c\x2c\xce\x0e\x28\xde\xf7\xe7\xd7\x97\x37\x97\x67\x3f\xbf\x3e\x7f\x3b\x66\xaf\x3a\xb9\x25\xe0\xc5\xec\x1f\xaf\x17\x6f\xce\xae\x6e\xde\x9e\xfe\x7a\x36\x96\x11\x52\xa2\xf7\x0c\x3a\x4f\xff\xbc\xbc\x39\x5d\x2c\xce\x96\xcb\x9b\x37\x67\xef\xc7\x42\x11\xd0\x0d\x42\xcb\xb3\xc5\xe5\xd9\xd5\x48\x88\x3f\x81\x0c\x0a\x84\x24\x4b\x28\xbf\x9b\xcd\x66\x03\x6d\x83\x82\x5e\x92\xe3\xe8\x7f\xcb\x19\x38\x9b\x90\x5f\xed\x5b\xcc\xcf\xdb\x08\xe5\xe0\x2f\xc6\x7a\xa3\xea\xfa\xaf\xbd\x71\x14\x3a\x6c\x0e\x9a\xa9\x8c\x95\x53\x3b\x74\x63\x83\x68\x08\xdf\xf7\xf8\xfa\x40\x67\x84\xbf\x13\x9a\x7a\xd8\x8f\xe8\x61\x43\x50\xd0\xea\xaa\x84\x67\x90\x65\xe9\xfd\xcc\x68\x7f\xdc\xb6\xf0\xf7\x7f\xf4\xdb\x9d\x9e\x80\x10\x2c\xb8\xce\xa4\x4f\x60\x20\x35\x0a\x83\x0e\xe8\xae\x8e\xa4\x45\xa4\x2c\x1c\x77\x12\xcc\xe0\xff\xe9\x8f\x4c\x9c\xf7\x20\xb6\xff\x66\x76\xf1\x0e\xf8\x63\xb5\xd0\xe0\xd5\x07\xfc\xea\x2d\x97\xec\xe5\xb3\x2c\x8b\x4f\xd6\xff\x44\x12\xd1\xd3\xbf\x2d\x87\x68\x8e\x52\x98\x00\x3d\xfb\xbb\x36\x75\xcb\xe4\xe3\x75\x15\x77\xfe\x94\xfb\xf6\x0d\xb5\x64\x4f\x8a\xef\x8c\x87\x0c\xff\x8c\xbf\x67\xfb\x67\xe5\x74\xfa\x3b\x7a\x8f\xe6\x71\x5b\xfc\x21\x3e\xcf\xfe\x19\x00\x00\xff\xff\x0c\xfe\xd7\x62\xa3\x18\x00\x00")

func codefreshConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_codefreshConfigYaml,
		"codefresh/config.yaml",
	)
}

func codefreshConfigYaml() (*asset, error) {
	bytes, err := codefreshConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/config.yaml", size: 6307, mode: os.FileMode(420), modTime: time.Unix(1588755023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _codefreshDockerDockerMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xc1\x09\x02\x41\x0c\x05\xd0\xfb\x54\xf1\x61\xce\xda\xc4\x5a\x81\x1d\xc4\xd9\x3f\xbb\x51\x49\x24\x89\x88\xdd\x7b\x10\xc1\x02\x1e\xaf\xf7\x8e\x93\x8f\x1b\x03\x67\x6e\x9a\x15\xca\xc4\x70\x9b\xba\x3d\x43\x4a\xdd\x5a\x5b\xdc\x4a\x46\x61\xf1\x95\x33\x98\x3b\xca\xe1\x97\x12\x35\xa4\x1c\xaf\xe9\x86\x97\xd6\x8e\x11\x5c\x69\xa5\x72\x4f\x4c\x8f\x3f\x40\x2b\xc6\x23\x34\x89\xf8\x3e\xef\xd6\x0e\x3f\xfd\x09\x00\x00\xff\xff\x2d\xc0\xca\x30\x86\x00\x00\x00")

func codefreshDockerDockerMdBytes() ([]byte, error) {
	return bindataRead(
		_codefreshDockerDockerMd,
		"codefresh/docker/docker.md",
	)
}

func codefreshDockerDockerMd() (*asset, error) {
	bytes, err := codefreshDockerDockerMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "codefresh/docker/docker.md", size: 134, mode: os.FileMode(420), modTime: time.Unix(1588502364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8sAgentConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\xce\xcc\x4b\xb1\x52\xc8\xb6\x28\xd6\x4d\x4c\x4f\xcd\x2b\x01\x04\x00\x00\xff\xff\x73\xdb\xf5\x15\x1b\x00\x00\x00")

func k8sAgentConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sAgentConfigYaml,
		"k8s-agent/config.yaml",
	)
}

func k8sAgentConfigYaml() (*asset, error) {
	bytes, err := k8sAgentConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-agent/config.yaml", size: 27, mode: os.FileMode(420), modTime: time.Unix(1588688342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"codefresh/assets/assets.md": codefreshAssetsAssetsMd,
	"codefresh/certs/tls.md":     codefreshCertsTlsMd,
	"codefresh/config.yaml":      codefreshConfigYaml,
	"codefresh/docker/docker.md": codefreshDockerDockerMd,
	"k8s-agent/config.yaml":      k8sAgentConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"codefresh": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"assets.md": &bintree{codefreshAssetsAssetsMd, map[string]*bintree{}},
		}},
		"certs": &bintree{nil, map[string]*bintree{
			"tls.md": &bintree{codefreshCertsTlsMd, map[string]*bintree{}},
		}},
		"config.yaml": &bintree{codefreshConfigYaml, map[string]*bintree{}},
		"docker": &bintree{nil, map[string]*bintree{
			"docker.md": &bintree{codefreshDockerDockerMd, map[string]*bintree{}},
		}},
	}},
	"k8s-agent": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{k8sAgentConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
